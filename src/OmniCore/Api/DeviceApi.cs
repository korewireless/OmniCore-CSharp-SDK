/*
 * OmniCore Model and State Management API
 *
 * This is an OmniCore Model and State Management server.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: omnicoresupport@korewireless.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using OmniCore.Client;
using OmniCore.Model;

namespace OmniCore.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeviceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bind  a device to a gateway under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="bind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Info</returns>
        Info BindDevice(string subscriptionId, string registryId, BindRequest bind, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bind  a device to a gateway under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="bind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Info</returns>
        ApiResponse<Info> BindDeviceWithHttpInfo(string subscriptionId, string registryId, BindRequest bind, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bind devices to a gateway under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="bind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Info</returns>
        Info BindDevices(string subscriptionId, string registryId, BindRequestIdsGateway bind, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bind devices to a gateway under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="bind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Info</returns>
        ApiResponse<Info> BindDevicesWithHttpInfo(string subscriptionId, string registryId, BindRequestIdsGateway bind, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Blocks All Communication From A Device
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="block">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object BlockDeviceCommuncation(string subscriptionid, string registryId, string deviceId, BlockCommunicationBody block, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Blocks All Communication From A Device
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="block">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> BlockDeviceCommuncationWithHttpInfo(string subscriptionid, string registryId, string deviceId, BlockCommunicationBody block, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a device under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="device">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Device</returns>
        Device CreateDevice(string subscriptionId, string registryId, Device device, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a device under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="device">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Device</returns>
        ApiResponse<Device> CreateDeviceWithHttpInfo(string subscriptionId, string registryId, Device device, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a device under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object DeleteDevice(string subscriptionId, string registryId, string deviceId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a device under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteDeviceWithHttpInfo(string subscriptionId, string registryId, string deviceId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get Configs Of Devices
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="numVersions">The number of versions to list. Versions are listed in decreasing order of the version number. The maximum number of versions retained is 10. If this value is zero, it will return all the versions available. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListDeviceConfigVersionsResponse</returns>
        ListDeviceConfigVersionsResponse GetConfig(string subscriptionid, string registryId, string deviceId, int? numVersions = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get Configs Of Devices
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="numVersions">The number of versions to list. Versions are listed in decreasing order of the version number. The maximum number of versions retained is 10. If this value is zero, it will return all the versions available. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListDeviceConfigVersionsResponse</returns>
        ApiResponse<ListDeviceConfigVersionsResponse> GetConfigWithHttpInfo(string subscriptionid, string registryId, string deviceId, int? numVersions = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a device under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Device</returns>
        Device GetDevice(string subscriptionId, string registryId, string deviceId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a device under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Device</returns>
        ApiResponse<Device> GetDeviceWithHttpInfo(string subscriptionId, string registryId, string deviceId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all devices under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="pageNumber">Page Number (optional)</param>
        /// <param name="pageSize">The maximum number of devices to return in the response. If this value is zero, the service will select a default size.  (optional)</param>
        /// <param name="fieldMask">The fields of the Device resource to be returned to the response. The fields id and numId are always returned, along with any other fields specified. A comma-separated list of fully qualified names of fields. Example:  (optional)</param>
        /// <param name="deviceIds">A list of device string IDs. For example, [&#39;device0&#39;, &#39;device12&#39;]. If empty, this field is ignored. Maximum IDs: 10,000 (optional)</param>
        /// <param name="deviceNumIds">A list of device numeric IDs. If empty, this field is ignored. Maximum IDs: 10,000. (optional)</param>
        /// <param name="gatewayListOptionsAssociationsDeviceId">If set, returns only the gateways with which the specified device is associated. The device ID can be numeric (num_id) or the user-defined string (id). For example, if 456 is specified, returns only the gateways to which the device with num_id 456 is bound. (optional)</param>
        /// <param name="gatewayListOptionsAssociationsGatewayId">If set, only devices associated with the specified gateway are returned. The gateway ID can be numeric (num_id) or the user-defined string (id). For example, if 123 is specified, only devices bound to the gateway with num_id 123 are returned (optional)</param>
        /// <param name="gatewayListOptionsGatewayType">If GATEWAY is specified, only gateways are returned. If NON_GATEWAY is specified, only non-gateway devices are returned. If GATEWAY_TYPE_UNSPECIFIED is specified, all devices are returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListDevicesResponse</returns>
        ListDevicesResponse GetDevices(string subscriptionId, string registryId, int? pageNumber = default(int?), int? pageSize = default(int?), string fieldMask = default(string), List<string> deviceIds = default(List<string>), List<string> deviceNumIds = default(List<string>), string gatewayListOptionsAssociationsDeviceId = default(string), string gatewayListOptionsAssociationsGatewayId = default(string), string gatewayListOptionsGatewayType = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all devices under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="pageNumber">Page Number (optional)</param>
        /// <param name="pageSize">The maximum number of devices to return in the response. If this value is zero, the service will select a default size.  (optional)</param>
        /// <param name="fieldMask">The fields of the Device resource to be returned to the response. The fields id and numId are always returned, along with any other fields specified. A comma-separated list of fully qualified names of fields. Example:  (optional)</param>
        /// <param name="deviceIds">A list of device string IDs. For example, [&#39;device0&#39;, &#39;device12&#39;]. If empty, this field is ignored. Maximum IDs: 10,000 (optional)</param>
        /// <param name="deviceNumIds">A list of device numeric IDs. If empty, this field is ignored. Maximum IDs: 10,000. (optional)</param>
        /// <param name="gatewayListOptionsAssociationsDeviceId">If set, returns only the gateways with which the specified device is associated. The device ID can be numeric (num_id) or the user-defined string (id). For example, if 456 is specified, returns only the gateways to which the device with num_id 456 is bound. (optional)</param>
        /// <param name="gatewayListOptionsAssociationsGatewayId">If set, only devices associated with the specified gateway are returned. The gateway ID can be numeric (num_id) or the user-defined string (id). For example, if 123 is specified, only devices bound to the gateway with num_id 123 are returned (optional)</param>
        /// <param name="gatewayListOptionsGatewayType">If GATEWAY is specified, only gateways are returned. If NON_GATEWAY is specified, only non-gateway devices are returned. If GATEWAY_TYPE_UNSPECIFIED is specified, all devices are returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListDevicesResponse</returns>
        ApiResponse<ListDevicesResponse> GetDevicesWithHttpInfo(string subscriptionId, string registryId, int? pageNumber = default(int?), int? pageSize = default(int?), string fieldMask = default(string), List<string> deviceIds = default(List<string>), List<string> deviceNumIds = default(List<string>), string gatewayListOptionsAssociationsDeviceId = default(string), string gatewayListOptionsAssociationsGatewayId = default(string), string gatewayListOptionsGatewayType = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get States Of Devices
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="numStates">The number of states to list. States are listed in descending order of update time. The maximum number of states retained is 10. If this value is zero, it will return all the states available. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListDeviceStatesResponse</returns>
        ListDeviceStatesResponse GetStates(string subscriptionid, string registryId, string deviceId, int? numStates = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get States Of Devices
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="numStates">The number of states to list. States are listed in descending order of update time. The maximum number of states retained is 10. If this value is zero, it will return all the states available. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListDeviceStatesResponse</returns>
        ApiResponse<ListDeviceStatesResponse> GetStatesWithHttpInfo(string subscriptionid, string registryId, string deviceId, int? numStates = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send A Command To A Device
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="command">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object SendCommandToDevice(string subscriptionid, string registryId, string deviceId, DeviceCommand command, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send A Command To A Device
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="command">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SendCommandToDeviceWithHttpInfo(string subscriptionid, string registryId, string deviceId, DeviceCommand command, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// UnBind  a device from a gateway under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="unbind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Info</returns>
        Info UnBindDevice(string subscriptionId, string registryId, BindRequest unbind, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// UnBind  a device from a gateway under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="unbind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Info</returns>
        ApiResponse<Info> UnBindDeviceWithHttpInfo(string subscriptionId, string registryId, BindRequest unbind, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// UnBind devices from a gateway under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="unbind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Info</returns>
        Info UnBindDevices(string subscriptionId, string registryId, BindRequestIdsGateway unbind, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// UnBind devices from a gateway under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="unbind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Info</returns>
        ApiResponse<Info> UnBindDevicesWithHttpInfo(string subscriptionId, string registryId, BindRequestIdsGateway unbind, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update A Configuration Of A Device
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="configuration">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeviceConfig</returns>
        DeviceConfig UpdateConfigurationToDevice(string subscriptionid, string registryId, string deviceId, DeviceConfiguration configuration, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update A Configuration Of A Device
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="configuration">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeviceConfig</returns>
        ApiResponse<DeviceConfig> UpdateConfigurationToDeviceWithHttpInfo(string subscriptionid, string registryId, string deviceId, DeviceConfiguration configuration, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve/Reject a Custom Onboard Request
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="customOnboard">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Info</returns>
        Info UpdateCustomOnboardRequest(string subscriptionid, string registryId, string deviceId, CustomOnboard customOnboard, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve/Reject a Custom Onboard Request
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="customOnboard">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Info</returns>
        ApiResponse<Info> UpdateCustomOnboardRequestWithHttpInfo(string subscriptionid, string registryId, string deviceId, CustomOnboard customOnboard, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Modify device under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="updateMask">Required. Only updates the device fields indicated by this mask. The field mask must not be empty, and it must not contain fields that are immutable or only set by the server. Mutable top-level fields: credentials,logLevel, blocked,policy and metadata</param>
        /// <param name="device">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Device</returns>
        Device UpdateDevice(string subscriptionId, string registryId, string deviceId, string updateMask, Device device, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Modify device under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="updateMask">Required. Only updates the device fields indicated by this mask. The field mask must not be empty, and it must not contain fields that are immutable or only set by the server. Mutable top-level fields: credentials,logLevel, blocked,policy and metadata</param>
        /// <param name="device">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Device</returns>
        ApiResponse<Device> UpdateDeviceWithHttpInfo(string subscriptionId, string registryId, string deviceId, string updateMask, Device device, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeviceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bind  a device to a gateway under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="bind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Info</returns>
        System.Threading.Tasks.Task<Info> BindDeviceAsync(string subscriptionId, string registryId, BindRequest bind, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bind  a device to a gateway under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="bind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Info)</returns>
        System.Threading.Tasks.Task<ApiResponse<Info>> BindDeviceWithHttpInfoAsync(string subscriptionId, string registryId, BindRequest bind, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bind devices to a gateway under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="bind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Info</returns>
        System.Threading.Tasks.Task<Info> BindDevicesAsync(string subscriptionId, string registryId, BindRequestIdsGateway bind, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bind devices to a gateway under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="bind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Info)</returns>
        System.Threading.Tasks.Task<ApiResponse<Info>> BindDevicesWithHttpInfoAsync(string subscriptionId, string registryId, BindRequestIdsGateway bind, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Blocks All Communication From A Device
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="block">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> BlockDeviceCommuncationAsync(string subscriptionid, string registryId, string deviceId, BlockCommunicationBody block, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Blocks All Communication From A Device
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="block">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BlockDeviceCommuncationWithHttpInfoAsync(string subscriptionid, string registryId, string deviceId, BlockCommunicationBody block, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a device under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="device">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Device</returns>
        System.Threading.Tasks.Task<Device> CreateDeviceAsync(string subscriptionId, string registryId, Device device, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a device under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="device">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Device)</returns>
        System.Threading.Tasks.Task<ApiResponse<Device>> CreateDeviceWithHttpInfoAsync(string subscriptionId, string registryId, Device device, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a device under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteDeviceAsync(string subscriptionId, string registryId, string deviceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a device under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDeviceWithHttpInfoAsync(string subscriptionId, string registryId, string deviceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get Configs Of Devices
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="numVersions">The number of versions to list. Versions are listed in decreasing order of the version number. The maximum number of versions retained is 10. If this value is zero, it will return all the versions available. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListDeviceConfigVersionsResponse</returns>
        System.Threading.Tasks.Task<ListDeviceConfigVersionsResponse> GetConfigAsync(string subscriptionid, string registryId, string deviceId, int? numVersions = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get Configs Of Devices
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="numVersions">The number of versions to list. Versions are listed in decreasing order of the version number. The maximum number of versions retained is 10. If this value is zero, it will return all the versions available. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListDeviceConfigVersionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListDeviceConfigVersionsResponse>> GetConfigWithHttpInfoAsync(string subscriptionid, string registryId, string deviceId, int? numVersions = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a device under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Device</returns>
        System.Threading.Tasks.Task<Device> GetDeviceAsync(string subscriptionId, string registryId, string deviceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a device under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Device)</returns>
        System.Threading.Tasks.Task<ApiResponse<Device>> GetDeviceWithHttpInfoAsync(string subscriptionId, string registryId, string deviceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all devices under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="pageNumber">Page Number (optional)</param>
        /// <param name="pageSize">The maximum number of devices to return in the response. If this value is zero, the service will select a default size.  (optional)</param>
        /// <param name="fieldMask">The fields of the Device resource to be returned to the response. The fields id and numId are always returned, along with any other fields specified. A comma-separated list of fully qualified names of fields. Example:  (optional)</param>
        /// <param name="deviceIds">A list of device string IDs. For example, [&#39;device0&#39;, &#39;device12&#39;]. If empty, this field is ignored. Maximum IDs: 10,000 (optional)</param>
        /// <param name="deviceNumIds">A list of device numeric IDs. If empty, this field is ignored. Maximum IDs: 10,000. (optional)</param>
        /// <param name="gatewayListOptionsAssociationsDeviceId">If set, returns only the gateways with which the specified device is associated. The device ID can be numeric (num_id) or the user-defined string (id). For example, if 456 is specified, returns only the gateways to which the device with num_id 456 is bound. (optional)</param>
        /// <param name="gatewayListOptionsAssociationsGatewayId">If set, only devices associated with the specified gateway are returned. The gateway ID can be numeric (num_id) or the user-defined string (id). For example, if 123 is specified, only devices bound to the gateway with num_id 123 are returned (optional)</param>
        /// <param name="gatewayListOptionsGatewayType">If GATEWAY is specified, only gateways are returned. If NON_GATEWAY is specified, only non-gateway devices are returned. If GATEWAY_TYPE_UNSPECIFIED is specified, all devices are returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListDevicesResponse</returns>
        System.Threading.Tasks.Task<ListDevicesResponse> GetDevicesAsync(string subscriptionId, string registryId, int? pageNumber = default(int?), int? pageSize = default(int?), string fieldMask = default(string), List<string> deviceIds = default(List<string>), List<string> deviceNumIds = default(List<string>), string gatewayListOptionsAssociationsDeviceId = default(string), string gatewayListOptionsAssociationsGatewayId = default(string), string gatewayListOptionsGatewayType = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all devices under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="pageNumber">Page Number (optional)</param>
        /// <param name="pageSize">The maximum number of devices to return in the response. If this value is zero, the service will select a default size.  (optional)</param>
        /// <param name="fieldMask">The fields of the Device resource to be returned to the response. The fields id and numId are always returned, along with any other fields specified. A comma-separated list of fully qualified names of fields. Example:  (optional)</param>
        /// <param name="deviceIds">A list of device string IDs. For example, [&#39;device0&#39;, &#39;device12&#39;]. If empty, this field is ignored. Maximum IDs: 10,000 (optional)</param>
        /// <param name="deviceNumIds">A list of device numeric IDs. If empty, this field is ignored. Maximum IDs: 10,000. (optional)</param>
        /// <param name="gatewayListOptionsAssociationsDeviceId">If set, returns only the gateways with which the specified device is associated. The device ID can be numeric (num_id) or the user-defined string (id). For example, if 456 is specified, returns only the gateways to which the device with num_id 456 is bound. (optional)</param>
        /// <param name="gatewayListOptionsAssociationsGatewayId">If set, only devices associated with the specified gateway are returned. The gateway ID can be numeric (num_id) or the user-defined string (id). For example, if 123 is specified, only devices bound to the gateway with num_id 123 are returned (optional)</param>
        /// <param name="gatewayListOptionsGatewayType">If GATEWAY is specified, only gateways are returned. If NON_GATEWAY is specified, only non-gateway devices are returned. If GATEWAY_TYPE_UNSPECIFIED is specified, all devices are returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListDevicesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListDevicesResponse>> GetDevicesWithHttpInfoAsync(string subscriptionId, string registryId, int? pageNumber = default(int?), int? pageSize = default(int?), string fieldMask = default(string), List<string> deviceIds = default(List<string>), List<string> deviceNumIds = default(List<string>), string gatewayListOptionsAssociationsDeviceId = default(string), string gatewayListOptionsAssociationsGatewayId = default(string), string gatewayListOptionsGatewayType = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get States Of Devices
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="numStates">The number of states to list. States are listed in descending order of update time. The maximum number of states retained is 10. If this value is zero, it will return all the states available. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListDeviceStatesResponse</returns>
        System.Threading.Tasks.Task<ListDeviceStatesResponse> GetStatesAsync(string subscriptionid, string registryId, string deviceId, int? numStates = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get States Of Devices
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="numStates">The number of states to list. States are listed in descending order of update time. The maximum number of states retained is 10. If this value is zero, it will return all the states available. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListDeviceStatesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListDeviceStatesResponse>> GetStatesWithHttpInfoAsync(string subscriptionid, string registryId, string deviceId, int? numStates = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send A Command To A Device
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="command">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SendCommandToDeviceAsync(string subscriptionid, string registryId, string deviceId, DeviceCommand command, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send A Command To A Device
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="command">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendCommandToDeviceWithHttpInfoAsync(string subscriptionid, string registryId, string deviceId, DeviceCommand command, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// UnBind  a device from a gateway under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="unbind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Info</returns>
        System.Threading.Tasks.Task<Info> UnBindDeviceAsync(string subscriptionId, string registryId, BindRequest unbind, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// UnBind  a device from a gateway under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="unbind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Info)</returns>
        System.Threading.Tasks.Task<ApiResponse<Info>> UnBindDeviceWithHttpInfoAsync(string subscriptionId, string registryId, BindRequest unbind, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// UnBind devices from a gateway under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="unbind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Info</returns>
        System.Threading.Tasks.Task<Info> UnBindDevicesAsync(string subscriptionId, string registryId, BindRequestIdsGateway unbind, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// UnBind devices from a gateway under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="unbind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Info)</returns>
        System.Threading.Tasks.Task<ApiResponse<Info>> UnBindDevicesWithHttpInfoAsync(string subscriptionId, string registryId, BindRequestIdsGateway unbind, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update A Configuration Of A Device
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="configuration">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeviceConfig</returns>
        System.Threading.Tasks.Task<DeviceConfig> UpdateConfigurationToDeviceAsync(string subscriptionid, string registryId, string deviceId, DeviceConfiguration configuration, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update A Configuration Of A Device
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="configuration">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeviceConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceConfig>> UpdateConfigurationToDeviceWithHttpInfoAsync(string subscriptionid, string registryId, string deviceId, DeviceConfiguration configuration, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve/Reject a Custom Onboard Request
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="customOnboard">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Info</returns>
        System.Threading.Tasks.Task<Info> UpdateCustomOnboardRequestAsync(string subscriptionid, string registryId, string deviceId, CustomOnboard customOnboard, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve/Reject a Custom Onboard Request
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="customOnboard">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Info)</returns>
        System.Threading.Tasks.Task<ApiResponse<Info>> UpdateCustomOnboardRequestWithHttpInfoAsync(string subscriptionid, string registryId, string deviceId, CustomOnboard customOnboard, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Modify device under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="updateMask">Required. Only updates the device fields indicated by this mask. The field mask must not be empty, and it must not contain fields that are immutable or only set by the server. Mutable top-level fields: credentials,logLevel, blocked,policy and metadata</param>
        /// <param name="device">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Device</returns>
        System.Threading.Tasks.Task<Device> UpdateDeviceAsync(string subscriptionId, string registryId, string deviceId, string updateMask, Device device, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Modify device under a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="updateMask">Required. Only updates the device fields indicated by this mask. The field mask must not be empty, and it must not contain fields that are immutable or only set by the server. Mutable top-level fields: credentials,logLevel, blocked,policy and metadata</param>
        /// <param name="device">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Device)</returns>
        System.Threading.Tasks.Task<ApiResponse<Device>> UpdateDeviceWithHttpInfoAsync(string subscriptionId, string registryId, string deviceId, string updateMask, Device device, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeviceApi : IDeviceApiSync, IDeviceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeviceApi : IDeviceApi
    {
        private OmniCore.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeviceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeviceApi(string basePath)
        {
            this.Configuration = OmniCore.Client.Configuration.MergeConfigurations(
                OmniCore.Client.GlobalConfiguration.Instance,
                new OmniCore.Client.Configuration { BasePath = basePath }
            );
            this.Client = new OmniCore.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OmniCore.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = OmniCore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DeviceApi(OmniCore.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = OmniCore.Client.Configuration.MergeConfigurations(
                OmniCore.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new OmniCore.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OmniCore.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = OmniCore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DeviceApi(OmniCore.Client.ISynchronousClient client, OmniCore.Client.IAsynchronousClient asyncClient, OmniCore.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = OmniCore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public OmniCore.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public OmniCore.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OmniCore.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OmniCore.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Bind  a device to a gateway under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="bind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Info</returns>
        public Info BindDevice(string subscriptionId, string registryId, BindRequest bind, int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<Info> localVarResponse = BindDeviceWithHttpInfo(subscriptionId, registryId, bind);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Bind  a device to a gateway under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="bind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Info</returns>
        public OmniCore.Client.ApiResponse<Info> BindDeviceWithHttpInfo(string subscriptionId, string registryId, BindRequest bind, int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DeviceApi->BindDevice");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling DeviceApi->BindDevice");
            }

            // verify the required parameter 'bind' is set
            if (bind == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'bind' when calling DeviceApi->BindDevice");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionId", OmniCore.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            localVarRequestOptions.Data = bind;

            localVarRequestOptions.Operation = "DeviceApi.BindDevice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Info>("/subscriptions/{subscriptionId}/registries/{registryId}/bindDeviceToGateway", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BindDevice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Bind  a device to a gateway under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="bind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Info</returns>
        public async System.Threading.Tasks.Task<Info> BindDeviceAsync(string subscriptionId, string registryId, BindRequest bind, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<Info> localVarResponse = await BindDeviceWithHttpInfoAsync(subscriptionId, registryId, bind, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Bind  a device to a gateway under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="bind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Info)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<Info>> BindDeviceWithHttpInfoAsync(string subscriptionId, string registryId, BindRequest bind, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DeviceApi->BindDevice");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling DeviceApi->BindDevice");
            }

            // verify the required parameter 'bind' is set
            if (bind == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'bind' when calling DeviceApi->BindDevice");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionId", OmniCore.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            localVarRequestOptions.Data = bind;

            localVarRequestOptions.Operation = "DeviceApi.BindDevice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Info>("/subscriptions/{subscriptionId}/registries/{registryId}/bindDeviceToGateway", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BindDevice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Bind devices to a gateway under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="bind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Info</returns>
        public Info BindDevices(string subscriptionId, string registryId, BindRequestIdsGateway bind, int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<Info> localVarResponse = BindDevicesWithHttpInfo(subscriptionId, registryId, bind);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Bind devices to a gateway under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="bind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Info</returns>
        public OmniCore.Client.ApiResponse<Info> BindDevicesWithHttpInfo(string subscriptionId, string registryId, BindRequestIdsGateway bind, int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DeviceApi->BindDevices");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling DeviceApi->BindDevices");
            }

            // verify the required parameter 'bind' is set
            if (bind == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'bind' when calling DeviceApi->BindDevices");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionId", OmniCore.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            localVarRequestOptions.Data = bind;

            localVarRequestOptions.Operation = "DeviceApi.BindDevices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Info>("/subscriptions/{subscriptionId}/registries/{registryId}/bindDevicesToGateway", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BindDevices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Bind devices to a gateway under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="bind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Info</returns>
        public async System.Threading.Tasks.Task<Info> BindDevicesAsync(string subscriptionId, string registryId, BindRequestIdsGateway bind, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<Info> localVarResponse = await BindDevicesWithHttpInfoAsync(subscriptionId, registryId, bind, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Bind devices to a gateway under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="bind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Info)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<Info>> BindDevicesWithHttpInfoAsync(string subscriptionId, string registryId, BindRequestIdsGateway bind, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DeviceApi->BindDevices");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling DeviceApi->BindDevices");
            }

            // verify the required parameter 'bind' is set
            if (bind == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'bind' when calling DeviceApi->BindDevices");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionId", OmniCore.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            localVarRequestOptions.Data = bind;

            localVarRequestOptions.Operation = "DeviceApi.BindDevices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Info>("/subscriptions/{subscriptionId}/registries/{registryId}/bindDevicesToGateway", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BindDevices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Blocks All Communication From A Device
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="block">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object BlockDeviceCommuncation(string subscriptionid, string registryId, string deviceId, BlockCommunicationBody block, int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<Object> localVarResponse = BlockDeviceCommuncationWithHttpInfo(subscriptionid, registryId, deviceId, block);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Blocks All Communication From A Device
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="block">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public OmniCore.Client.ApiResponse<Object> BlockDeviceCommuncationWithHttpInfo(string subscriptionid, string registryId, string deviceId, BlockCommunicationBody block, int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling DeviceApi->BlockDeviceCommuncation");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling DeviceApi->BlockDeviceCommuncation");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DeviceApi->BlockDeviceCommuncation");
            }

            // verify the required parameter 'block' is set
            if (block == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'block' when calling DeviceApi->BlockDeviceCommuncation");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", OmniCore.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            localVarRequestOptions.Data = block;

            localVarRequestOptions.Operation = "DeviceApi.BlockDeviceCommuncation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/subscriptions/{subscriptionid}/registries/{registryId}/devices/{deviceId}/communication", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockDeviceCommuncation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Blocks All Communication From A Device
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="block">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> BlockDeviceCommuncationAsync(string subscriptionid, string registryId, string deviceId, BlockCommunicationBody block, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<Object> localVarResponse = await BlockDeviceCommuncationWithHttpInfoAsync(subscriptionid, registryId, deviceId, block, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Blocks All Communication From A Device
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="block">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<Object>> BlockDeviceCommuncationWithHttpInfoAsync(string subscriptionid, string registryId, string deviceId, BlockCommunicationBody block, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling DeviceApi->BlockDeviceCommuncation");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling DeviceApi->BlockDeviceCommuncation");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DeviceApi->BlockDeviceCommuncation");
            }

            // verify the required parameter 'block' is set
            if (block == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'block' when calling DeviceApi->BlockDeviceCommuncation");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", OmniCore.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            localVarRequestOptions.Data = block;

            localVarRequestOptions.Operation = "DeviceApi.BlockDeviceCommuncation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/subscriptions/{subscriptionid}/registries/{registryId}/devices/{deviceId}/communication", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockDeviceCommuncation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create a device under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="device">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Device</returns>
        public Device CreateDevice(string subscriptionId, string registryId, Device device, int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<Device> localVarResponse = CreateDeviceWithHttpInfo(subscriptionId, registryId, device);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a device under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="device">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Device</returns>
        public OmniCore.Client.ApiResponse<Device> CreateDeviceWithHttpInfo(string subscriptionId, string registryId, Device device, int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DeviceApi->CreateDevice");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling DeviceApi->CreateDevice");
            }

            // verify the required parameter 'device' is set
            if (device == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'device' when calling DeviceApi->CreateDevice");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionId", OmniCore.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            localVarRequestOptions.Data = device;

            localVarRequestOptions.Operation = "DeviceApi.CreateDevice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Device>("/subscriptions/{subscriptionId}/registries/{registryId}/devices", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDevice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create a device under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="device">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Device</returns>
        public async System.Threading.Tasks.Task<Device> CreateDeviceAsync(string subscriptionId, string registryId, Device device, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<Device> localVarResponse = await CreateDeviceWithHttpInfoAsync(subscriptionId, registryId, device, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a device under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="device">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Device)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<Device>> CreateDeviceWithHttpInfoAsync(string subscriptionId, string registryId, Device device, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DeviceApi->CreateDevice");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling DeviceApi->CreateDevice");
            }

            // verify the required parameter 'device' is set
            if (device == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'device' when calling DeviceApi->CreateDevice");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionId", OmniCore.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            localVarRequestOptions.Data = device;

            localVarRequestOptions.Operation = "DeviceApi.CreateDevice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Device>("/subscriptions/{subscriptionId}/registries/{registryId}/devices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDevice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete a device under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object DeleteDevice(string subscriptionId, string registryId, string deviceId, int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<Object> localVarResponse = DeleteDeviceWithHttpInfo(subscriptionId, registryId, deviceId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Delete a device under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public OmniCore.Client.ApiResponse<Object> DeleteDeviceWithHttpInfo(string subscriptionId, string registryId, string deviceId, int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DeviceApi->DeleteDevice");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling DeviceApi->DeleteDevice");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DeviceApi->DeleteDevice");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionId", OmniCore.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", OmniCore.Client.ClientUtils.ParameterToString(deviceId)); // path parameter

            localVarRequestOptions.Operation = "DeviceApi.DeleteDevice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/subscriptions/{subscriptionId}/registries/{registryId}/devices/{deviceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDevice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete a device under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteDeviceAsync(string subscriptionId, string registryId, string deviceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<Object> localVarResponse = await DeleteDeviceWithHttpInfoAsync(subscriptionId, registryId, deviceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Delete a device under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<Object>> DeleteDeviceWithHttpInfoAsync(string subscriptionId, string registryId, string deviceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DeviceApi->DeleteDevice");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling DeviceApi->DeleteDevice");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DeviceApi->DeleteDevice");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionId", OmniCore.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", OmniCore.Client.ClientUtils.ParameterToString(deviceId)); // path parameter

            localVarRequestOptions.Operation = "DeviceApi.DeleteDevice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/subscriptions/{subscriptionId}/registries/{registryId}/devices/{deviceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDevice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get Configs Of Devices
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="numVersions">The number of versions to list. Versions are listed in decreasing order of the version number. The maximum number of versions retained is 10. If this value is zero, it will return all the versions available. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListDeviceConfigVersionsResponse</returns>
        public ListDeviceConfigVersionsResponse GetConfig(string subscriptionid, string registryId, string deviceId, int? numVersions = default(int?), int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<ListDeviceConfigVersionsResponse> localVarResponse = GetConfigWithHttpInfo(subscriptionid, registryId, deviceId, numVersions);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get Configs Of Devices
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="numVersions">The number of versions to list. Versions are listed in decreasing order of the version number. The maximum number of versions retained is 10. If this value is zero, it will return all the versions available. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListDeviceConfigVersionsResponse</returns>
        public OmniCore.Client.ApiResponse<ListDeviceConfigVersionsResponse> GetConfigWithHttpInfo(string subscriptionid, string registryId, string deviceId, int? numVersions = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling DeviceApi->GetConfig");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling DeviceApi->GetConfig");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DeviceApi->GetConfig");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", OmniCore.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            if (numVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "numVersions", numVersions));
            }

            localVarRequestOptions.Operation = "DeviceApi.GetConfig";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListDeviceConfigVersionsResponse>("/subscriptions/{subscriptionid}/registries/{registryId}/devices/{deviceId}/configVersions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfig", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get Configs Of Devices
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="numVersions">The number of versions to list. Versions are listed in decreasing order of the version number. The maximum number of versions retained is 10. If this value is zero, it will return all the versions available. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListDeviceConfigVersionsResponse</returns>
        public async System.Threading.Tasks.Task<ListDeviceConfigVersionsResponse> GetConfigAsync(string subscriptionid, string registryId, string deviceId, int? numVersions = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<ListDeviceConfigVersionsResponse> localVarResponse = await GetConfigWithHttpInfoAsync(subscriptionid, registryId, deviceId, numVersions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get Configs Of Devices
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="numVersions">The number of versions to list. Versions are listed in decreasing order of the version number. The maximum number of versions retained is 10. If this value is zero, it will return all the versions available. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListDeviceConfigVersionsResponse)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<ListDeviceConfigVersionsResponse>> GetConfigWithHttpInfoAsync(string subscriptionid, string registryId, string deviceId, int? numVersions = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling DeviceApi->GetConfig");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling DeviceApi->GetConfig");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DeviceApi->GetConfig");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", OmniCore.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            if (numVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "numVersions", numVersions));
            }

            localVarRequestOptions.Operation = "DeviceApi.GetConfig";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListDeviceConfigVersionsResponse>("/subscriptions/{subscriptionid}/registries/{registryId}/devices/{deviceId}/configVersions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfig", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a device under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Device</returns>
        public Device GetDevice(string subscriptionId, string registryId, string deviceId, int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<Device> localVarResponse = GetDeviceWithHttpInfo(subscriptionId, registryId, deviceId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a device under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Device</returns>
        public OmniCore.Client.ApiResponse<Device> GetDeviceWithHttpInfo(string subscriptionId, string registryId, string deviceId, int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DeviceApi->GetDevice");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling DeviceApi->GetDevice");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DeviceApi->GetDevice");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionId", OmniCore.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", OmniCore.Client.ClientUtils.ParameterToString(deviceId)); // path parameter

            localVarRequestOptions.Operation = "DeviceApi.GetDevice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Device>("/subscriptions/{subscriptionId}/registries/{registryId}/devices/{deviceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDevice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a device under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Device</returns>
        public async System.Threading.Tasks.Task<Device> GetDeviceAsync(string subscriptionId, string registryId, string deviceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<Device> localVarResponse = await GetDeviceWithHttpInfoAsync(subscriptionId, registryId, deviceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a device under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Device)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<Device>> GetDeviceWithHttpInfoAsync(string subscriptionId, string registryId, string deviceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DeviceApi->GetDevice");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling DeviceApi->GetDevice");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DeviceApi->GetDevice");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionId", OmniCore.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", OmniCore.Client.ClientUtils.ParameterToString(deviceId)); // path parameter

            localVarRequestOptions.Operation = "DeviceApi.GetDevice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Device>("/subscriptions/{subscriptionId}/registries/{registryId}/devices/{deviceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDevice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get all devices under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="pageNumber">Page Number (optional)</param>
        /// <param name="pageSize">The maximum number of devices to return in the response. If this value is zero, the service will select a default size.  (optional)</param>
        /// <param name="fieldMask">The fields of the Device resource to be returned to the response. The fields id and numId are always returned, along with any other fields specified. A comma-separated list of fully qualified names of fields. Example:  (optional)</param>
        /// <param name="deviceIds">A list of device string IDs. For example, [&#39;device0&#39;, &#39;device12&#39;]. If empty, this field is ignored. Maximum IDs: 10,000 (optional)</param>
        /// <param name="deviceNumIds">A list of device numeric IDs. If empty, this field is ignored. Maximum IDs: 10,000. (optional)</param>
        /// <param name="gatewayListOptionsAssociationsDeviceId">If set, returns only the gateways with which the specified device is associated. The device ID can be numeric (num_id) or the user-defined string (id). For example, if 456 is specified, returns only the gateways to which the device with num_id 456 is bound. (optional)</param>
        /// <param name="gatewayListOptionsAssociationsGatewayId">If set, only devices associated with the specified gateway are returned. The gateway ID can be numeric (num_id) or the user-defined string (id). For example, if 123 is specified, only devices bound to the gateway with num_id 123 are returned (optional)</param>
        /// <param name="gatewayListOptionsGatewayType">If GATEWAY is specified, only gateways are returned. If NON_GATEWAY is specified, only non-gateway devices are returned. If GATEWAY_TYPE_UNSPECIFIED is specified, all devices are returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListDevicesResponse</returns>
        public ListDevicesResponse GetDevices(string subscriptionId, string registryId, int? pageNumber = default(int?), int? pageSize = default(int?), string fieldMask = default(string), List<string> deviceIds = default(List<string>), List<string> deviceNumIds = default(List<string>), string gatewayListOptionsAssociationsDeviceId = default(string), string gatewayListOptionsAssociationsGatewayId = default(string), string gatewayListOptionsGatewayType = default(string), int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<ListDevicesResponse> localVarResponse = GetDevicesWithHttpInfo(subscriptionId, registryId, pageNumber, pageSize, fieldMask, deviceIds, deviceNumIds, gatewayListOptionsAssociationsDeviceId, gatewayListOptionsAssociationsGatewayId, gatewayListOptionsGatewayType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get all devices under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="pageNumber">Page Number (optional)</param>
        /// <param name="pageSize">The maximum number of devices to return in the response. If this value is zero, the service will select a default size.  (optional)</param>
        /// <param name="fieldMask">The fields of the Device resource to be returned to the response. The fields id and numId are always returned, along with any other fields specified. A comma-separated list of fully qualified names of fields. Example:  (optional)</param>
        /// <param name="deviceIds">A list of device string IDs. For example, [&#39;device0&#39;, &#39;device12&#39;]. If empty, this field is ignored. Maximum IDs: 10,000 (optional)</param>
        /// <param name="deviceNumIds">A list of device numeric IDs. If empty, this field is ignored. Maximum IDs: 10,000. (optional)</param>
        /// <param name="gatewayListOptionsAssociationsDeviceId">If set, returns only the gateways with which the specified device is associated. The device ID can be numeric (num_id) or the user-defined string (id). For example, if 456 is specified, returns only the gateways to which the device with num_id 456 is bound. (optional)</param>
        /// <param name="gatewayListOptionsAssociationsGatewayId">If set, only devices associated with the specified gateway are returned. The gateway ID can be numeric (num_id) or the user-defined string (id). For example, if 123 is specified, only devices bound to the gateway with num_id 123 are returned (optional)</param>
        /// <param name="gatewayListOptionsGatewayType">If GATEWAY is specified, only gateways are returned. If NON_GATEWAY is specified, only non-gateway devices are returned. If GATEWAY_TYPE_UNSPECIFIED is specified, all devices are returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListDevicesResponse</returns>
        public OmniCore.Client.ApiResponse<ListDevicesResponse> GetDevicesWithHttpInfo(string subscriptionId, string registryId, int? pageNumber = default(int?), int? pageSize = default(int?), string fieldMask = default(string), List<string> deviceIds = default(List<string>), List<string> deviceNumIds = default(List<string>), string gatewayListOptionsAssociationsDeviceId = default(string), string gatewayListOptionsAssociationsGatewayId = default(string), string gatewayListOptionsGatewayType = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DeviceApi->GetDevices");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling DeviceApi->GetDevices");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionId", OmniCore.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (fieldMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "fieldMask", fieldMask));
            }
            if (deviceIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("csv", "deviceIds", deviceIds));
            }
            if (deviceNumIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("csv", "deviceNumIds", deviceNumIds));
            }
            if (gatewayListOptionsAssociationsDeviceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "gatewayListOptions.associationsDeviceId", gatewayListOptionsAssociationsDeviceId));
            }
            if (gatewayListOptionsAssociationsGatewayId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "gatewayListOptions.associationsGatewayId", gatewayListOptionsAssociationsGatewayId));
            }
            if (gatewayListOptionsGatewayType != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "gatewayListOptions.gatewayType", gatewayListOptionsGatewayType));
            }

            localVarRequestOptions.Operation = "DeviceApi.GetDevices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListDevicesResponse>("/subscriptions/{subscriptionId}/registries/{registryId}/devices", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDevices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get all devices under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="pageNumber">Page Number (optional)</param>
        /// <param name="pageSize">The maximum number of devices to return in the response. If this value is zero, the service will select a default size.  (optional)</param>
        /// <param name="fieldMask">The fields of the Device resource to be returned to the response. The fields id and numId are always returned, along with any other fields specified. A comma-separated list of fully qualified names of fields. Example:  (optional)</param>
        /// <param name="deviceIds">A list of device string IDs. For example, [&#39;device0&#39;, &#39;device12&#39;]. If empty, this field is ignored. Maximum IDs: 10,000 (optional)</param>
        /// <param name="deviceNumIds">A list of device numeric IDs. If empty, this field is ignored. Maximum IDs: 10,000. (optional)</param>
        /// <param name="gatewayListOptionsAssociationsDeviceId">If set, returns only the gateways with which the specified device is associated. The device ID can be numeric (num_id) or the user-defined string (id). For example, if 456 is specified, returns only the gateways to which the device with num_id 456 is bound. (optional)</param>
        /// <param name="gatewayListOptionsAssociationsGatewayId">If set, only devices associated with the specified gateway are returned. The gateway ID can be numeric (num_id) or the user-defined string (id). For example, if 123 is specified, only devices bound to the gateway with num_id 123 are returned (optional)</param>
        /// <param name="gatewayListOptionsGatewayType">If GATEWAY is specified, only gateways are returned. If NON_GATEWAY is specified, only non-gateway devices are returned. If GATEWAY_TYPE_UNSPECIFIED is specified, all devices are returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListDevicesResponse</returns>
        public async System.Threading.Tasks.Task<ListDevicesResponse> GetDevicesAsync(string subscriptionId, string registryId, int? pageNumber = default(int?), int? pageSize = default(int?), string fieldMask = default(string), List<string> deviceIds = default(List<string>), List<string> deviceNumIds = default(List<string>), string gatewayListOptionsAssociationsDeviceId = default(string), string gatewayListOptionsAssociationsGatewayId = default(string), string gatewayListOptionsGatewayType = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<ListDevicesResponse> localVarResponse = await GetDevicesWithHttpInfoAsync(subscriptionId, registryId, pageNumber, pageSize, fieldMask, deviceIds, deviceNumIds, gatewayListOptionsAssociationsDeviceId, gatewayListOptionsAssociationsGatewayId, gatewayListOptionsGatewayType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get all devices under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="pageNumber">Page Number (optional)</param>
        /// <param name="pageSize">The maximum number of devices to return in the response. If this value is zero, the service will select a default size.  (optional)</param>
        /// <param name="fieldMask">The fields of the Device resource to be returned to the response. The fields id and numId are always returned, along with any other fields specified. A comma-separated list of fully qualified names of fields. Example:  (optional)</param>
        /// <param name="deviceIds">A list of device string IDs. For example, [&#39;device0&#39;, &#39;device12&#39;]. If empty, this field is ignored. Maximum IDs: 10,000 (optional)</param>
        /// <param name="deviceNumIds">A list of device numeric IDs. If empty, this field is ignored. Maximum IDs: 10,000. (optional)</param>
        /// <param name="gatewayListOptionsAssociationsDeviceId">If set, returns only the gateways with which the specified device is associated. The device ID can be numeric (num_id) or the user-defined string (id). For example, if 456 is specified, returns only the gateways to which the device with num_id 456 is bound. (optional)</param>
        /// <param name="gatewayListOptionsAssociationsGatewayId">If set, only devices associated with the specified gateway are returned. The gateway ID can be numeric (num_id) or the user-defined string (id). For example, if 123 is specified, only devices bound to the gateway with num_id 123 are returned (optional)</param>
        /// <param name="gatewayListOptionsGatewayType">If GATEWAY is specified, only gateways are returned. If NON_GATEWAY is specified, only non-gateway devices are returned. If GATEWAY_TYPE_UNSPECIFIED is specified, all devices are returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListDevicesResponse)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<ListDevicesResponse>> GetDevicesWithHttpInfoAsync(string subscriptionId, string registryId, int? pageNumber = default(int?), int? pageSize = default(int?), string fieldMask = default(string), List<string> deviceIds = default(List<string>), List<string> deviceNumIds = default(List<string>), string gatewayListOptionsAssociationsDeviceId = default(string), string gatewayListOptionsAssociationsGatewayId = default(string), string gatewayListOptionsGatewayType = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DeviceApi->GetDevices");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling DeviceApi->GetDevices");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionId", OmniCore.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (fieldMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "fieldMask", fieldMask));
            }
            if (deviceIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("csv", "deviceIds", deviceIds));
            }
            if (deviceNumIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("csv", "deviceNumIds", deviceNumIds));
            }
            if (gatewayListOptionsAssociationsDeviceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "gatewayListOptions.associationsDeviceId", gatewayListOptionsAssociationsDeviceId));
            }
            if (gatewayListOptionsAssociationsGatewayId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "gatewayListOptions.associationsGatewayId", gatewayListOptionsAssociationsGatewayId));
            }
            if (gatewayListOptionsGatewayType != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "gatewayListOptions.gatewayType", gatewayListOptionsGatewayType));
            }

            localVarRequestOptions.Operation = "DeviceApi.GetDevices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListDevicesResponse>("/subscriptions/{subscriptionId}/registries/{registryId}/devices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDevices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get States Of Devices
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="numStates">The number of states to list. States are listed in descending order of update time. The maximum number of states retained is 10. If this value is zero, it will return all the states available. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListDeviceStatesResponse</returns>
        public ListDeviceStatesResponse GetStates(string subscriptionid, string registryId, string deviceId, int? numStates = default(int?), int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<ListDeviceStatesResponse> localVarResponse = GetStatesWithHttpInfo(subscriptionid, registryId, deviceId, numStates);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get States Of Devices
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="numStates">The number of states to list. States are listed in descending order of update time. The maximum number of states retained is 10. If this value is zero, it will return all the states available. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListDeviceStatesResponse</returns>
        public OmniCore.Client.ApiResponse<ListDeviceStatesResponse> GetStatesWithHttpInfo(string subscriptionid, string registryId, string deviceId, int? numStates = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling DeviceApi->GetStates");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling DeviceApi->GetStates");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DeviceApi->GetStates");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", OmniCore.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            if (numStates != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "numStates", numStates));
            }

            localVarRequestOptions.Operation = "DeviceApi.GetStates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListDeviceStatesResponse>("/subscriptions/{subscriptionid}/registries/{registryId}/devices/{deviceId}/states", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get States Of Devices
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="numStates">The number of states to list. States are listed in descending order of update time. The maximum number of states retained is 10. If this value is zero, it will return all the states available. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListDeviceStatesResponse</returns>
        public async System.Threading.Tasks.Task<ListDeviceStatesResponse> GetStatesAsync(string subscriptionid, string registryId, string deviceId, int? numStates = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<ListDeviceStatesResponse> localVarResponse = await GetStatesWithHttpInfoAsync(subscriptionid, registryId, deviceId, numStates, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get States Of Devices
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="numStates">The number of states to list. States are listed in descending order of update time. The maximum number of states retained is 10. If this value is zero, it will return all the states available. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListDeviceStatesResponse)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<ListDeviceStatesResponse>> GetStatesWithHttpInfoAsync(string subscriptionid, string registryId, string deviceId, int? numStates = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling DeviceApi->GetStates");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling DeviceApi->GetStates");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DeviceApi->GetStates");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", OmniCore.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            if (numStates != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "numStates", numStates));
            }

            localVarRequestOptions.Operation = "DeviceApi.GetStates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListDeviceStatesResponse>("/subscriptions/{subscriptionid}/registries/{registryId}/devices/{deviceId}/states", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Send A Command To A Device
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="command">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object SendCommandToDevice(string subscriptionid, string registryId, string deviceId, DeviceCommand command, int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<Object> localVarResponse = SendCommandToDeviceWithHttpInfo(subscriptionid, registryId, deviceId, command);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Send A Command To A Device
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="command">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public OmniCore.Client.ApiResponse<Object> SendCommandToDeviceWithHttpInfo(string subscriptionid, string registryId, string deviceId, DeviceCommand command, int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling DeviceApi->SendCommandToDevice");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling DeviceApi->SendCommandToDevice");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DeviceApi->SendCommandToDevice");
            }

            // verify the required parameter 'command' is set
            if (command == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'command' when calling DeviceApi->SendCommandToDevice");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", OmniCore.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            localVarRequestOptions.Data = command;

            localVarRequestOptions.Operation = "DeviceApi.SendCommandToDevice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/subscriptions/{subscriptionid}/registries/{registryId}/devices/{deviceId}/sendCommandToDevice", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendCommandToDevice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Send A Command To A Device
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="command">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SendCommandToDeviceAsync(string subscriptionid, string registryId, string deviceId, DeviceCommand command, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<Object> localVarResponse = await SendCommandToDeviceWithHttpInfoAsync(subscriptionid, registryId, deviceId, command, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Send A Command To A Device
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="command">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<Object>> SendCommandToDeviceWithHttpInfoAsync(string subscriptionid, string registryId, string deviceId, DeviceCommand command, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling DeviceApi->SendCommandToDevice");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling DeviceApi->SendCommandToDevice");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DeviceApi->SendCommandToDevice");
            }

            // verify the required parameter 'command' is set
            if (command == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'command' when calling DeviceApi->SendCommandToDevice");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", OmniCore.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            localVarRequestOptions.Data = command;

            localVarRequestOptions.Operation = "DeviceApi.SendCommandToDevice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/subscriptions/{subscriptionid}/registries/{registryId}/devices/{deviceId}/sendCommandToDevice", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendCommandToDevice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  UnBind  a device from a gateway under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="unbind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Info</returns>
        public Info UnBindDevice(string subscriptionId, string registryId, BindRequest unbind, int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<Info> localVarResponse = UnBindDeviceWithHttpInfo(subscriptionId, registryId, unbind);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  UnBind  a device from a gateway under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="unbind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Info</returns>
        public OmniCore.Client.ApiResponse<Info> UnBindDeviceWithHttpInfo(string subscriptionId, string registryId, BindRequest unbind, int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DeviceApi->UnBindDevice");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling DeviceApi->UnBindDevice");
            }

            // verify the required parameter 'unbind' is set
            if (unbind == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'unbind' when calling DeviceApi->UnBindDevice");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionId", OmniCore.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            localVarRequestOptions.Data = unbind;

            localVarRequestOptions.Operation = "DeviceApi.UnBindDevice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Info>("/subscriptions/{subscriptionId}/registries/{registryId}/unbindDeviceFromGateway", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnBindDevice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  UnBind  a device from a gateway under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="unbind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Info</returns>
        public async System.Threading.Tasks.Task<Info> UnBindDeviceAsync(string subscriptionId, string registryId, BindRequest unbind, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<Info> localVarResponse = await UnBindDeviceWithHttpInfoAsync(subscriptionId, registryId, unbind, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  UnBind  a device from a gateway under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="unbind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Info)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<Info>> UnBindDeviceWithHttpInfoAsync(string subscriptionId, string registryId, BindRequest unbind, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DeviceApi->UnBindDevice");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling DeviceApi->UnBindDevice");
            }

            // verify the required parameter 'unbind' is set
            if (unbind == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'unbind' when calling DeviceApi->UnBindDevice");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionId", OmniCore.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            localVarRequestOptions.Data = unbind;

            localVarRequestOptions.Operation = "DeviceApi.UnBindDevice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Info>("/subscriptions/{subscriptionId}/registries/{registryId}/unbindDeviceFromGateway", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnBindDevice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  UnBind devices from a gateway under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="unbind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Info</returns>
        public Info UnBindDevices(string subscriptionId, string registryId, BindRequestIdsGateway unbind, int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<Info> localVarResponse = UnBindDevicesWithHttpInfo(subscriptionId, registryId, unbind);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  UnBind devices from a gateway under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="unbind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Info</returns>
        public OmniCore.Client.ApiResponse<Info> UnBindDevicesWithHttpInfo(string subscriptionId, string registryId, BindRequestIdsGateway unbind, int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DeviceApi->UnBindDevices");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling DeviceApi->UnBindDevices");
            }

            // verify the required parameter 'unbind' is set
            if (unbind == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'unbind' when calling DeviceApi->UnBindDevices");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionId", OmniCore.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            localVarRequestOptions.Data = unbind;

            localVarRequestOptions.Operation = "DeviceApi.UnBindDevices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Info>("/subscriptions/{subscriptionId}/registries/{registryId}/unbindDevicesFromGateway", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnBindDevices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  UnBind devices from a gateway under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="unbind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Info</returns>
        public async System.Threading.Tasks.Task<Info> UnBindDevicesAsync(string subscriptionId, string registryId, BindRequestIdsGateway unbind, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<Info> localVarResponse = await UnBindDevicesWithHttpInfoAsync(subscriptionId, registryId, unbind, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  UnBind devices from a gateway under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="unbind">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Info)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<Info>> UnBindDevicesWithHttpInfoAsync(string subscriptionId, string registryId, BindRequestIdsGateway unbind, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DeviceApi->UnBindDevices");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling DeviceApi->UnBindDevices");
            }

            // verify the required parameter 'unbind' is set
            if (unbind == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'unbind' when calling DeviceApi->UnBindDevices");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionId", OmniCore.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            localVarRequestOptions.Data = unbind;

            localVarRequestOptions.Operation = "DeviceApi.UnBindDevices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Info>("/subscriptions/{subscriptionId}/registries/{registryId}/unbindDevicesFromGateway", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnBindDevices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update A Configuration Of A Device
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="configuration">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeviceConfig</returns>
        public DeviceConfig UpdateConfigurationToDevice(string subscriptionid, string registryId, string deviceId, DeviceConfiguration configuration, int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<DeviceConfig> localVarResponse = UpdateConfigurationToDeviceWithHttpInfo(subscriptionid, registryId, deviceId, configuration);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update A Configuration Of A Device
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="configuration">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeviceConfig</returns>
        public OmniCore.Client.ApiResponse<DeviceConfig> UpdateConfigurationToDeviceWithHttpInfo(string subscriptionid, string registryId, string deviceId, DeviceConfiguration configuration, int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling DeviceApi->UpdateConfigurationToDevice");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling DeviceApi->UpdateConfigurationToDevice");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DeviceApi->UpdateConfigurationToDevice");
            }

            // verify the required parameter 'configuration' is set
            if (configuration == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'configuration' when calling DeviceApi->UpdateConfigurationToDevice");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", OmniCore.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            localVarRequestOptions.Data = configuration;

            localVarRequestOptions.Operation = "DeviceApi.UpdateConfigurationToDevice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DeviceConfig>("/subscriptions/{subscriptionid}/registries/{registryId}/devices/{deviceId}/updateConfigurationToDevice", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateConfigurationToDevice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update A Configuration Of A Device
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="configuration">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeviceConfig</returns>
        public async System.Threading.Tasks.Task<DeviceConfig> UpdateConfigurationToDeviceAsync(string subscriptionid, string registryId, string deviceId, DeviceConfiguration configuration, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<DeviceConfig> localVarResponse = await UpdateConfigurationToDeviceWithHttpInfoAsync(subscriptionid, registryId, deviceId, configuration, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update A Configuration Of A Device
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="configuration">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeviceConfig)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<DeviceConfig>> UpdateConfigurationToDeviceWithHttpInfoAsync(string subscriptionid, string registryId, string deviceId, DeviceConfiguration configuration, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling DeviceApi->UpdateConfigurationToDevice");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling DeviceApi->UpdateConfigurationToDevice");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DeviceApi->UpdateConfigurationToDevice");
            }

            // verify the required parameter 'configuration' is set
            if (configuration == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'configuration' when calling DeviceApi->UpdateConfigurationToDevice");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", OmniCore.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            localVarRequestOptions.Data = configuration;

            localVarRequestOptions.Operation = "DeviceApi.UpdateConfigurationToDevice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DeviceConfig>("/subscriptions/{subscriptionid}/registries/{registryId}/devices/{deviceId}/updateConfigurationToDevice", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateConfigurationToDevice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Approve/Reject a Custom Onboard Request
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="customOnboard">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Info</returns>
        public Info UpdateCustomOnboardRequest(string subscriptionid, string registryId, string deviceId, CustomOnboard customOnboard, int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<Info> localVarResponse = UpdateCustomOnboardRequestWithHttpInfo(subscriptionid, registryId, deviceId, customOnboard);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Approve/Reject a Custom Onboard Request
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="customOnboard">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Info</returns>
        public OmniCore.Client.ApiResponse<Info> UpdateCustomOnboardRequestWithHttpInfo(string subscriptionid, string registryId, string deviceId, CustomOnboard customOnboard, int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling DeviceApi->UpdateCustomOnboardRequest");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling DeviceApi->UpdateCustomOnboardRequest");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DeviceApi->UpdateCustomOnboardRequest");
            }

            // verify the required parameter 'customOnboard' is set
            if (customOnboard == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'customOnboard' when calling DeviceApi->UpdateCustomOnboardRequest");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", OmniCore.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            localVarRequestOptions.Data = customOnboard;

            localVarRequestOptions.Operation = "DeviceApi.UpdateCustomOnboardRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Info>("/subscriptions/{subscriptionid}/registries/{registryId}/devices/{deviceId}/updateCustomOnboardRequest", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomOnboardRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Approve/Reject a Custom Onboard Request
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="customOnboard">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Info</returns>
        public async System.Threading.Tasks.Task<Info> UpdateCustomOnboardRequestAsync(string subscriptionid, string registryId, string deviceId, CustomOnboard customOnboard, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<Info> localVarResponse = await UpdateCustomOnboardRequestWithHttpInfoAsync(subscriptionid, registryId, deviceId, customOnboard, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Approve/Reject a Custom Onboard Request
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="customOnboard">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Info)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<Info>> UpdateCustomOnboardRequestWithHttpInfoAsync(string subscriptionid, string registryId, string deviceId, CustomOnboard customOnboard, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling DeviceApi->UpdateCustomOnboardRequest");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling DeviceApi->UpdateCustomOnboardRequest");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DeviceApi->UpdateCustomOnboardRequest");
            }

            // verify the required parameter 'customOnboard' is set
            if (customOnboard == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'customOnboard' when calling DeviceApi->UpdateCustomOnboardRequest");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", OmniCore.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            localVarRequestOptions.Data = customOnboard;

            localVarRequestOptions.Operation = "DeviceApi.UpdateCustomOnboardRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Info>("/subscriptions/{subscriptionid}/registries/{registryId}/devices/{deviceId}/updateCustomOnboardRequest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomOnboardRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Modify device under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="updateMask">Required. Only updates the device fields indicated by this mask. The field mask must not be empty, and it must not contain fields that are immutable or only set by the server. Mutable top-level fields: credentials,logLevel, blocked,policy and metadata</param>
        /// <param name="device">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Device</returns>
        public Device UpdateDevice(string subscriptionId, string registryId, string deviceId, string updateMask, Device device, int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<Device> localVarResponse = UpdateDeviceWithHttpInfo(subscriptionId, registryId, deviceId, updateMask, device);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Modify device under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="updateMask">Required. Only updates the device fields indicated by this mask. The field mask must not be empty, and it must not contain fields that are immutable or only set by the server. Mutable top-level fields: credentials,logLevel, blocked,policy and metadata</param>
        /// <param name="device">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Device</returns>
        public OmniCore.Client.ApiResponse<Device> UpdateDeviceWithHttpInfo(string subscriptionId, string registryId, string deviceId, string updateMask, Device device, int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DeviceApi->UpdateDevice");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling DeviceApi->UpdateDevice");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DeviceApi->UpdateDevice");
            }

            // verify the required parameter 'updateMask' is set
            if (updateMask == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'updateMask' when calling DeviceApi->UpdateDevice");
            }

            // verify the required parameter 'device' is set
            if (device == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'device' when calling DeviceApi->UpdateDevice");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionId", OmniCore.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", OmniCore.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "updateMask", updateMask));
            localVarRequestOptions.Data = device;

            localVarRequestOptions.Operation = "DeviceApi.UpdateDevice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Device>("/subscriptions/{subscriptionId}/registries/{registryId}/devices/{deviceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDevice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Modify device under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="updateMask">Required. Only updates the device fields indicated by this mask. The field mask must not be empty, and it must not contain fields that are immutable or only set by the server. Mutable top-level fields: credentials,logLevel, blocked,policy and metadata</param>
        /// <param name="device">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Device</returns>
        public async System.Threading.Tasks.Task<Device> UpdateDeviceAsync(string subscriptionId, string registryId, string deviceId, string updateMask, Device device, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<Device> localVarResponse = await UpdateDeviceWithHttpInfoAsync(subscriptionId, registryId, deviceId, updateMask, device, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Modify device under a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="deviceId">Device ID</param>
        /// <param name="updateMask">Required. Only updates the device fields indicated by this mask. The field mask must not be empty, and it must not contain fields that are immutable or only set by the server. Mutable top-level fields: credentials,logLevel, blocked,policy and metadata</param>
        /// <param name="device">application/json</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Device)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<Device>> UpdateDeviceWithHttpInfoAsync(string subscriptionId, string registryId, string deviceId, string updateMask, Device device, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DeviceApi->UpdateDevice");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling DeviceApi->UpdateDevice");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DeviceApi->UpdateDevice");
            }

            // verify the required parameter 'updateMask' is set
            if (updateMask == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'updateMask' when calling DeviceApi->UpdateDevice");
            }

            // verify the required parameter 'device' is set
            if (device == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'device' when calling DeviceApi->UpdateDevice");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionId", OmniCore.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", OmniCore.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "updateMask", updateMask));
            localVarRequestOptions.Data = device;

            localVarRequestOptions.Operation = "DeviceApi.UpdateDevice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Device>("/subscriptions/{subscriptionId}/registries/{registryId}/devices/{deviceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDevice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
