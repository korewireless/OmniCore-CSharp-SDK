/*
 * OmniCore Model and State Management API
 *
 * This is an OmniCore Model and State Management server.
 *
 * The version of the OpenAPI document: 1.8.6
 * Contact: omnicoresupport@korewireless.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using OmniCore.Client;
using OmniCore.Model;

namespace OmniCore.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create vault configuration
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="createConfiguration">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Frame</returns>
        Frame CreateVaultConfiguration(string subscriptionid, CreateConfiguration createConfiguration = default(CreateConfiguration), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create vault configuration
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="createConfiguration">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Frame</returns>
        ApiResponse<Frame> CreateVaultConfigurationWithHttpInfo(string subscriptionid, CreateConfiguration createConfiguration = default(CreateConfiguration), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Vault Key
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="createVaultKeyBody">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Frame</returns>
        Frame CreateVaultKey(string subscriptionid, CreateVaultKeyBody createVaultKeyBody = default(CreateVaultKeyBody), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Vault Key
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="createVaultKeyBody">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Frame</returns>
        ApiResponse<Frame> CreateVaultKeyWithHttpInfo(string subscriptionid, CreateVaultKeyBody createVaultKeyBody = default(CreateVaultKeyBody), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Configuration
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="configid">config id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Frame</returns>
        Frame DeleteConfiguration(string subscriptionid, string configid, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Configuration
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="configid">config id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Frame</returns>
        ApiResponse<Frame> DeleteConfigurationWithHttpInfo(string subscriptionid, string configid, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Vault Key
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="keyid">key id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Frame</returns>
        Frame DeleteVaultKey(string subscriptionid, string keyid, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Vault Key
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="keyid">key id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Frame</returns>
        ApiResponse<Frame> DeleteVaultKeyWithHttpInfo(string subscriptionid, string keyid, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get Exports
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetExportsResponse</returns>
        GetExportsResponse GetExports(string subscriptionid, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get Exports
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetExportsResponse</returns>
        ApiResponse<GetExportsResponse> GetExportsWithHttpInfo(string subscriptionid, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get vault folder data
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FolderData</returns>
        FolderData GetRegistryData(string subscriptionid, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get vault folder data
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FolderData</returns>
        ApiResponse<FolderData> GetRegistryDataWithHttpInfo(string subscriptionid, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get Replays
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetReplaysResponse</returns>
        GetReplaysResponse GetReplays(string subscriptionid, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get Replays
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetReplaysResponse</returns>
        ApiResponse<GetReplaysResponse> GetReplaysWithHttpInfo(string subscriptionid, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get vault Audit
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="pageNumber">Page Number (optional)</param>
        /// <param name="pageSize">Page Size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuditResult</returns>
        AuditResult GetVaultAudit(string subscriptionid, int? pageNumber = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get vault Audit
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="pageNumber">Page Number (optional)</param>
        /// <param name="pageSize">Page Size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuditResult</returns>
        ApiResponse<AuditResult> GetVaultAuditWithHttpInfo(string subscriptionid, int? pageNumber = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get vault configurations
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Configurations</returns>
        Configurations GetVaultConfigurations(string subscriptionid, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get vault configurations
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Configurations</returns>
        ApiResponse<Configurations> GetVaultConfigurationsWithHttpInfo(string subscriptionid, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get vault files
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryid">registry ID</param>
        /// <param name="fileType">file type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileDetails</returns>
        FileDetails GetVaultFiles(string subscriptionid, string registryid, string fileType = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get vault files
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryid">registry ID</param>
        /// <param name="fileType">file type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileDetails</returns>
        ApiResponse<FileDetails> GetVaultFilesWithHttpInfo(string subscriptionid, string registryid, string fileType = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get Vault Keys
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetKeysResponse</returns>
        GetKeysResponse GetVaultKeys(string subscriptionid, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get Vault Keys
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetKeysResponse</returns>
        ApiResponse<GetKeysResponse> GetVaultKeysWithHttpInfo(string subscriptionid, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get vault metrics
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="startTime">start time (optional)</param>
        /// <param name="endTime">end time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MetricsResponse</returns>
        MetricsResponse GetVaultMetrics(string subscriptionid, string startTime = default(string), string endTime = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get vault metrics
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="startTime">start time (optional)</param>
        /// <param name="endTime">end time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MetricsResponse</returns>
        ApiResponse<MetricsResponse> GetVaultMetricsWithHttpInfo(string subscriptionid, string startTime = default(string), string endTime = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get vault status
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VaultStatus</returns>
        VaultStatus GetVaultStatus(string subscriptionid, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get vault status
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VaultStatus</returns>
        ApiResponse<VaultStatus> GetVaultStatusWithHttpInfo(string subscriptionid, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Start Export
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="startExportBody">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Frame</returns>
        Frame StartExport(string subscriptionid, StartExportBody startExportBody = default(StartExportBody), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Start Export
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="startExportBody">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Frame</returns>
        ApiResponse<Frame> StartExportWithHttpInfo(string subscriptionid, StartExportBody startExportBody = default(StartExportBody), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Start Replay
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="replayBody">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string StartReplay(string subscriptionid, ReplayBody replayBody = default(ReplayBody), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Start Replay
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="replayBody">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> StartReplayWithHttpInfo(string subscriptionid, ReplayBody replayBody = default(ReplayBody), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create vault configuration
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="createConfiguration">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Frame</returns>
        System.Threading.Tasks.Task<Frame> CreateVaultConfigurationAsync(string subscriptionid, CreateConfiguration createConfiguration = default(CreateConfiguration), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create vault configuration
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="createConfiguration">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Frame)</returns>
        System.Threading.Tasks.Task<ApiResponse<Frame>> CreateVaultConfigurationWithHttpInfoAsync(string subscriptionid, CreateConfiguration createConfiguration = default(CreateConfiguration), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Vault Key
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="createVaultKeyBody">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Frame</returns>
        System.Threading.Tasks.Task<Frame> CreateVaultKeyAsync(string subscriptionid, CreateVaultKeyBody createVaultKeyBody = default(CreateVaultKeyBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Vault Key
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="createVaultKeyBody">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Frame)</returns>
        System.Threading.Tasks.Task<ApiResponse<Frame>> CreateVaultKeyWithHttpInfoAsync(string subscriptionid, CreateVaultKeyBody createVaultKeyBody = default(CreateVaultKeyBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Configuration
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="configid">config id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Frame</returns>
        System.Threading.Tasks.Task<Frame> DeleteConfigurationAsync(string subscriptionid, string configid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Configuration
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="configid">config id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Frame)</returns>
        System.Threading.Tasks.Task<ApiResponse<Frame>> DeleteConfigurationWithHttpInfoAsync(string subscriptionid, string configid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Vault Key
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="keyid">key id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Frame</returns>
        System.Threading.Tasks.Task<Frame> DeleteVaultKeyAsync(string subscriptionid, string keyid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Vault Key
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="keyid">key id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Frame)</returns>
        System.Threading.Tasks.Task<ApiResponse<Frame>> DeleteVaultKeyWithHttpInfoAsync(string subscriptionid, string keyid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get Exports
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetExportsResponse</returns>
        System.Threading.Tasks.Task<GetExportsResponse> GetExportsAsync(string subscriptionid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get Exports
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetExportsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetExportsResponse>> GetExportsWithHttpInfoAsync(string subscriptionid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get vault folder data
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FolderData</returns>
        System.Threading.Tasks.Task<FolderData> GetRegistryDataAsync(string subscriptionid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get vault folder data
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FolderData)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderData>> GetRegistryDataWithHttpInfoAsync(string subscriptionid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get Replays
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetReplaysResponse</returns>
        System.Threading.Tasks.Task<GetReplaysResponse> GetReplaysAsync(string subscriptionid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get Replays
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetReplaysResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetReplaysResponse>> GetReplaysWithHttpInfoAsync(string subscriptionid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get vault Audit
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="pageNumber">Page Number (optional)</param>
        /// <param name="pageSize">Page Size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuditResult</returns>
        System.Threading.Tasks.Task<AuditResult> GetVaultAuditAsync(string subscriptionid, int? pageNumber = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get vault Audit
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="pageNumber">Page Number (optional)</param>
        /// <param name="pageSize">Page Size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuditResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuditResult>> GetVaultAuditWithHttpInfoAsync(string subscriptionid, int? pageNumber = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get vault configurations
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Configurations</returns>
        System.Threading.Tasks.Task<Configurations> GetVaultConfigurationsAsync(string subscriptionid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get vault configurations
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Configurations)</returns>
        System.Threading.Tasks.Task<ApiResponse<Configurations>> GetVaultConfigurationsWithHttpInfoAsync(string subscriptionid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get vault files
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryid">registry ID</param>
        /// <param name="fileType">file type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileDetails</returns>
        System.Threading.Tasks.Task<FileDetails> GetVaultFilesAsync(string subscriptionid, string registryid, string fileType = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get vault files
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryid">registry ID</param>
        /// <param name="fileType">file type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileDetails>> GetVaultFilesWithHttpInfoAsync(string subscriptionid, string registryid, string fileType = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get Vault Keys
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetKeysResponse</returns>
        System.Threading.Tasks.Task<GetKeysResponse> GetVaultKeysAsync(string subscriptionid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get Vault Keys
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetKeysResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetKeysResponse>> GetVaultKeysWithHttpInfoAsync(string subscriptionid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get vault metrics
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="startTime">start time (optional)</param>
        /// <param name="endTime">end time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MetricsResponse</returns>
        System.Threading.Tasks.Task<MetricsResponse> GetVaultMetricsAsync(string subscriptionid, string startTime = default(string), string endTime = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get vault metrics
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="startTime">start time (optional)</param>
        /// <param name="endTime">end time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MetricsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MetricsResponse>> GetVaultMetricsWithHttpInfoAsync(string subscriptionid, string startTime = default(string), string endTime = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get vault status
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VaultStatus</returns>
        System.Threading.Tasks.Task<VaultStatus> GetVaultStatusAsync(string subscriptionid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get vault status
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VaultStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<VaultStatus>> GetVaultStatusWithHttpInfoAsync(string subscriptionid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Start Export
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="startExportBody">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Frame</returns>
        System.Threading.Tasks.Task<Frame> StartExportAsync(string subscriptionid, StartExportBody startExportBody = default(StartExportBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Start Export
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="startExportBody">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Frame)</returns>
        System.Threading.Tasks.Task<ApiResponse<Frame>> StartExportWithHttpInfoAsync(string subscriptionid, StartExportBody startExportBody = default(StartExportBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Start Replay
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="replayBody">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> StartReplayAsync(string subscriptionid, ReplayBody replayBody = default(ReplayBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Start Replay
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="replayBody">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> StartReplayWithHttpInfoAsync(string subscriptionid, ReplayBody replayBody = default(ReplayBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVaultApi : IVaultApiSync, IVaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VaultApi : IVaultApi
    {
        private OmniCore.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VaultApi(string basePath)
        {
            this.Configuration = OmniCore.Client.Configuration.MergeConfigurations(
                OmniCore.Client.GlobalConfiguration.Instance,
                new OmniCore.Client.Configuration { BasePath = basePath }
            );
            this.Client = new OmniCore.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OmniCore.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = OmniCore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VaultApi(OmniCore.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = OmniCore.Client.Configuration.MergeConfigurations(
                OmniCore.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new OmniCore.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OmniCore.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = OmniCore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public VaultApi(OmniCore.Client.ISynchronousClient client, OmniCore.Client.IAsynchronousClient asyncClient, OmniCore.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = OmniCore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public OmniCore.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public OmniCore.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OmniCore.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OmniCore.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  create vault configuration
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="createConfiguration">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Frame</returns>
        public Frame CreateVaultConfiguration(string subscriptionid, CreateConfiguration createConfiguration = default(CreateConfiguration), int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<Frame> localVarResponse = CreateVaultConfigurationWithHttpInfo(subscriptionid, createConfiguration);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  create vault configuration
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="createConfiguration">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Frame</returns>
        public OmniCore.Client.ApiResponse<Frame> CreateVaultConfigurationWithHttpInfo(string subscriptionid, CreateConfiguration createConfiguration = default(CreateConfiguration), int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling VaultApi->CreateVaultConfiguration");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter
            localVarRequestOptions.Data = createConfiguration;

            localVarRequestOptions.Operation = "VaultApi.CreateVaultConfiguration";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Frame>("/vault/subscriptions/{subscriptionid}/configurations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateVaultConfiguration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  create vault configuration
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="createConfiguration">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Frame</returns>
        public async System.Threading.Tasks.Task<Frame> CreateVaultConfigurationAsync(string subscriptionid, CreateConfiguration createConfiguration = default(CreateConfiguration), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<Frame> localVarResponse = await CreateVaultConfigurationWithHttpInfoAsync(subscriptionid, createConfiguration, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  create vault configuration
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="createConfiguration">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Frame)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<Frame>> CreateVaultConfigurationWithHttpInfoAsync(string subscriptionid, CreateConfiguration createConfiguration = default(CreateConfiguration), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling VaultApi->CreateVaultConfiguration");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter
            localVarRequestOptions.Data = createConfiguration;

            localVarRequestOptions.Operation = "VaultApi.CreateVaultConfiguration";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Frame>("/vault/subscriptions/{subscriptionid}/configurations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateVaultConfiguration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create Vault Key
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="createVaultKeyBody">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Frame</returns>
        public Frame CreateVaultKey(string subscriptionid, CreateVaultKeyBody createVaultKeyBody = default(CreateVaultKeyBody), int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<Frame> localVarResponse = CreateVaultKeyWithHttpInfo(subscriptionid, createVaultKeyBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create Vault Key
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="createVaultKeyBody">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Frame</returns>
        public OmniCore.Client.ApiResponse<Frame> CreateVaultKeyWithHttpInfo(string subscriptionid, CreateVaultKeyBody createVaultKeyBody = default(CreateVaultKeyBody), int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling VaultApi->CreateVaultKey");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter
            localVarRequestOptions.Data = createVaultKeyBody;

            localVarRequestOptions.Operation = "VaultApi.CreateVaultKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Frame>("/vault/subscriptions/{subscriptionid}/encryptionkeys", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateVaultKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create Vault Key
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="createVaultKeyBody">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Frame</returns>
        public async System.Threading.Tasks.Task<Frame> CreateVaultKeyAsync(string subscriptionid, CreateVaultKeyBody createVaultKeyBody = default(CreateVaultKeyBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<Frame> localVarResponse = await CreateVaultKeyWithHttpInfoAsync(subscriptionid, createVaultKeyBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create Vault Key
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="createVaultKeyBody">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Frame)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<Frame>> CreateVaultKeyWithHttpInfoAsync(string subscriptionid, CreateVaultKeyBody createVaultKeyBody = default(CreateVaultKeyBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling VaultApi->CreateVaultKey");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter
            localVarRequestOptions.Data = createVaultKeyBody;

            localVarRequestOptions.Operation = "VaultApi.CreateVaultKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Frame>("/vault/subscriptions/{subscriptionid}/encryptionkeys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateVaultKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete Configuration
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="configid">config id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Frame</returns>
        public Frame DeleteConfiguration(string subscriptionid, string configid, int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<Frame> localVarResponse = DeleteConfigurationWithHttpInfo(subscriptionid, configid);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Delete Configuration
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="configid">config id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Frame</returns>
        public OmniCore.Client.ApiResponse<Frame> DeleteConfigurationWithHttpInfo(string subscriptionid, string configid, int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling VaultApi->DeleteConfiguration");
            }

            // verify the required parameter 'configid' is set
            if (configid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'configid' when calling VaultApi->DeleteConfiguration");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter
            localVarRequestOptions.PathParameters.Add("configid", OmniCore.Client.ClientUtils.ParameterToString(configid)); // path parameter

            localVarRequestOptions.Operation = "VaultApi.DeleteConfiguration";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Frame>("/vault/subscriptions/{subscriptionid}/configurations/{configid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteConfiguration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete Configuration
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="configid">config id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Frame</returns>
        public async System.Threading.Tasks.Task<Frame> DeleteConfigurationAsync(string subscriptionid, string configid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<Frame> localVarResponse = await DeleteConfigurationWithHttpInfoAsync(subscriptionid, configid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Delete Configuration
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="configid">config id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Frame)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<Frame>> DeleteConfigurationWithHttpInfoAsync(string subscriptionid, string configid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling VaultApi->DeleteConfiguration");
            }

            // verify the required parameter 'configid' is set
            if (configid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'configid' when calling VaultApi->DeleteConfiguration");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter
            localVarRequestOptions.PathParameters.Add("configid", OmniCore.Client.ClientUtils.ParameterToString(configid)); // path parameter

            localVarRequestOptions.Operation = "VaultApi.DeleteConfiguration";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Frame>("/vault/subscriptions/{subscriptionid}/configurations/{configid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteConfiguration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete Vault Key
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="keyid">key id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Frame</returns>
        public Frame DeleteVaultKey(string subscriptionid, string keyid, int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<Frame> localVarResponse = DeleteVaultKeyWithHttpInfo(subscriptionid, keyid);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Delete Vault Key
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="keyid">key id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Frame</returns>
        public OmniCore.Client.ApiResponse<Frame> DeleteVaultKeyWithHttpInfo(string subscriptionid, string keyid, int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling VaultApi->DeleteVaultKey");
            }

            // verify the required parameter 'keyid' is set
            if (keyid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'keyid' when calling VaultApi->DeleteVaultKey");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter
            localVarRequestOptions.PathParameters.Add("keyid", OmniCore.Client.ClientUtils.ParameterToString(keyid)); // path parameter

            localVarRequestOptions.Operation = "VaultApi.DeleteVaultKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Frame>("/vault/subscriptions/{subscriptionid}/encryptionkeys/{keyid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVaultKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete Vault Key
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="keyid">key id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Frame</returns>
        public async System.Threading.Tasks.Task<Frame> DeleteVaultKeyAsync(string subscriptionid, string keyid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<Frame> localVarResponse = await DeleteVaultKeyWithHttpInfoAsync(subscriptionid, keyid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Delete Vault Key
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="keyid">key id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Frame)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<Frame>> DeleteVaultKeyWithHttpInfoAsync(string subscriptionid, string keyid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling VaultApi->DeleteVaultKey");
            }

            // verify the required parameter 'keyid' is set
            if (keyid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'keyid' when calling VaultApi->DeleteVaultKey");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter
            localVarRequestOptions.PathParameters.Add("keyid", OmniCore.Client.ClientUtils.ParameterToString(keyid)); // path parameter

            localVarRequestOptions.Operation = "VaultApi.DeleteVaultKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Frame>("/vault/subscriptions/{subscriptionid}/encryptionkeys/{keyid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVaultKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get Exports
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetExportsResponse</returns>
        public GetExportsResponse GetExports(string subscriptionid, int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<GetExportsResponse> localVarResponse = GetExportsWithHttpInfo(subscriptionid);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get Exports
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetExportsResponse</returns>
        public OmniCore.Client.ApiResponse<GetExportsResponse> GetExportsWithHttpInfo(string subscriptionid, int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling VaultApi->GetExports");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter

            localVarRequestOptions.Operation = "VaultApi.GetExports";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetExportsResponse>("/vault/subscriptions/{subscriptionid}/exports", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExports", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get Exports
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetExportsResponse</returns>
        public async System.Threading.Tasks.Task<GetExportsResponse> GetExportsAsync(string subscriptionid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<GetExportsResponse> localVarResponse = await GetExportsWithHttpInfoAsync(subscriptionid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get Exports
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetExportsResponse)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<GetExportsResponse>> GetExportsWithHttpInfoAsync(string subscriptionid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling VaultApi->GetExports");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter

            localVarRequestOptions.Operation = "VaultApi.GetExports";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetExportsResponse>("/vault/subscriptions/{subscriptionid}/exports", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExports", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get vault folder data
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FolderData</returns>
        public FolderData GetRegistryData(string subscriptionid, int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<FolderData> localVarResponse = GetRegistryDataWithHttpInfo(subscriptionid);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get vault folder data
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FolderData</returns>
        public OmniCore.Client.ApiResponse<FolderData> GetRegistryDataWithHttpInfo(string subscriptionid, int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling VaultApi->GetRegistryData");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter

            localVarRequestOptions.Operation = "VaultApi.GetRegistryData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FolderData>("/vault/subscriptions/{subscriptionid}/folders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRegistryData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get vault folder data
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FolderData</returns>
        public async System.Threading.Tasks.Task<FolderData> GetRegistryDataAsync(string subscriptionid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<FolderData> localVarResponse = await GetRegistryDataWithHttpInfoAsync(subscriptionid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get vault folder data
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FolderData)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<FolderData>> GetRegistryDataWithHttpInfoAsync(string subscriptionid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling VaultApi->GetRegistryData");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter

            localVarRequestOptions.Operation = "VaultApi.GetRegistryData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FolderData>("/vault/subscriptions/{subscriptionid}/folders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRegistryData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get Replays
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetReplaysResponse</returns>
        public GetReplaysResponse GetReplays(string subscriptionid, int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<GetReplaysResponse> localVarResponse = GetReplaysWithHttpInfo(subscriptionid);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get Replays
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetReplaysResponse</returns>
        public OmniCore.Client.ApiResponse<GetReplaysResponse> GetReplaysWithHttpInfo(string subscriptionid, int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling VaultApi->GetReplays");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter

            localVarRequestOptions.Operation = "VaultApi.GetReplays";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetReplaysResponse>("/vault/subscriptions/{subscriptionid}/replays", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReplays", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get Replays
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetReplaysResponse</returns>
        public async System.Threading.Tasks.Task<GetReplaysResponse> GetReplaysAsync(string subscriptionid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<GetReplaysResponse> localVarResponse = await GetReplaysWithHttpInfoAsync(subscriptionid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get Replays
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetReplaysResponse)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<GetReplaysResponse>> GetReplaysWithHttpInfoAsync(string subscriptionid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling VaultApi->GetReplays");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter

            localVarRequestOptions.Operation = "VaultApi.GetReplays";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetReplaysResponse>("/vault/subscriptions/{subscriptionid}/replays", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReplays", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get vault Audit
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="pageNumber">Page Number (optional)</param>
        /// <param name="pageSize">Page Size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuditResult</returns>
        public AuditResult GetVaultAudit(string subscriptionid, int? pageNumber = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<AuditResult> localVarResponse = GetVaultAuditWithHttpInfo(subscriptionid, pageNumber, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get vault Audit
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="pageNumber">Page Number (optional)</param>
        /// <param name="pageSize">Page Size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuditResult</returns>
        public OmniCore.Client.ApiResponse<AuditResult> GetVaultAuditWithHttpInfo(string subscriptionid, int? pageNumber = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling VaultApi->GetVaultAudit");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "VaultApi.GetVaultAudit";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AuditResult>("/vault/subscriptions/{subscriptionid}/audit", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVaultAudit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get vault Audit
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="pageNumber">Page Number (optional)</param>
        /// <param name="pageSize">Page Size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuditResult</returns>
        public async System.Threading.Tasks.Task<AuditResult> GetVaultAuditAsync(string subscriptionid, int? pageNumber = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<AuditResult> localVarResponse = await GetVaultAuditWithHttpInfoAsync(subscriptionid, pageNumber, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get vault Audit
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="pageNumber">Page Number (optional)</param>
        /// <param name="pageSize">Page Size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuditResult)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<AuditResult>> GetVaultAuditWithHttpInfoAsync(string subscriptionid, int? pageNumber = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling VaultApi->GetVaultAudit");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "VaultApi.GetVaultAudit";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AuditResult>("/vault/subscriptions/{subscriptionid}/audit", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVaultAudit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get vault configurations
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Configurations</returns>
        public Configurations GetVaultConfigurations(string subscriptionid, int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<Configurations> localVarResponse = GetVaultConfigurationsWithHttpInfo(subscriptionid);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get vault configurations
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Configurations</returns>
        public OmniCore.Client.ApiResponse<Configurations> GetVaultConfigurationsWithHttpInfo(string subscriptionid, int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling VaultApi->GetVaultConfigurations");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter

            localVarRequestOptions.Operation = "VaultApi.GetVaultConfigurations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Configurations>("/vault/subscriptions/{subscriptionid}/configurations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVaultConfigurations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get vault configurations
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Configurations</returns>
        public async System.Threading.Tasks.Task<Configurations> GetVaultConfigurationsAsync(string subscriptionid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<Configurations> localVarResponse = await GetVaultConfigurationsWithHttpInfoAsync(subscriptionid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get vault configurations
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Configurations)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<Configurations>> GetVaultConfigurationsWithHttpInfoAsync(string subscriptionid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling VaultApi->GetVaultConfigurations");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter

            localVarRequestOptions.Operation = "VaultApi.GetVaultConfigurations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Configurations>("/vault/subscriptions/{subscriptionid}/configurations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVaultConfigurations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get vault files
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryid">registry ID</param>
        /// <param name="fileType">file type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileDetails</returns>
        public FileDetails GetVaultFiles(string subscriptionid, string registryid, string fileType = default(string), int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<FileDetails> localVarResponse = GetVaultFilesWithHttpInfo(subscriptionid, registryid, fileType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get vault files
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryid">registry ID</param>
        /// <param name="fileType">file type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileDetails</returns>
        public OmniCore.Client.ApiResponse<FileDetails> GetVaultFilesWithHttpInfo(string subscriptionid, string registryid, string fileType = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling VaultApi->GetVaultFiles");
            }

            // verify the required parameter 'registryid' is set
            if (registryid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryid' when calling VaultApi->GetVaultFiles");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryid", OmniCore.Client.ClientUtils.ParameterToString(registryid)); // path parameter
            if (fileType != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "fileType", fileType));
            }

            localVarRequestOptions.Operation = "VaultApi.GetVaultFiles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FileDetails>("/vault/subscriptions/{subscriptionid}/registry/{registryid}/files", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVaultFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get vault files
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryid">registry ID</param>
        /// <param name="fileType">file type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileDetails</returns>
        public async System.Threading.Tasks.Task<FileDetails> GetVaultFilesAsync(string subscriptionid, string registryid, string fileType = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<FileDetails> localVarResponse = await GetVaultFilesWithHttpInfoAsync(subscriptionid, registryid, fileType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get vault files
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="registryid">registry ID</param>
        /// <param name="fileType">file type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileDetails)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<FileDetails>> GetVaultFilesWithHttpInfoAsync(string subscriptionid, string registryid, string fileType = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling VaultApi->GetVaultFiles");
            }

            // verify the required parameter 'registryid' is set
            if (registryid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryid' when calling VaultApi->GetVaultFiles");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryid", OmniCore.Client.ClientUtils.ParameterToString(registryid)); // path parameter
            if (fileType != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "fileType", fileType));
            }

            localVarRequestOptions.Operation = "VaultApi.GetVaultFiles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FileDetails>("/vault/subscriptions/{subscriptionid}/registry/{registryid}/files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVaultFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get Vault Keys
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetKeysResponse</returns>
        public GetKeysResponse GetVaultKeys(string subscriptionid, int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<GetKeysResponse> localVarResponse = GetVaultKeysWithHttpInfo(subscriptionid);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get Vault Keys
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetKeysResponse</returns>
        public OmniCore.Client.ApiResponse<GetKeysResponse> GetVaultKeysWithHttpInfo(string subscriptionid, int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling VaultApi->GetVaultKeys");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter

            localVarRequestOptions.Operation = "VaultApi.GetVaultKeys";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetKeysResponse>("/vault/subscriptions/{subscriptionid}/encryptionkeys", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVaultKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get Vault Keys
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetKeysResponse</returns>
        public async System.Threading.Tasks.Task<GetKeysResponse> GetVaultKeysAsync(string subscriptionid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<GetKeysResponse> localVarResponse = await GetVaultKeysWithHttpInfoAsync(subscriptionid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get Vault Keys
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetKeysResponse)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<GetKeysResponse>> GetVaultKeysWithHttpInfoAsync(string subscriptionid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling VaultApi->GetVaultKeys");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter

            localVarRequestOptions.Operation = "VaultApi.GetVaultKeys";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetKeysResponse>("/vault/subscriptions/{subscriptionid}/encryptionkeys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVaultKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get vault metrics
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="startTime">start time (optional)</param>
        /// <param name="endTime">end time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MetricsResponse</returns>
        public MetricsResponse GetVaultMetrics(string subscriptionid, string startTime = default(string), string endTime = default(string), int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<MetricsResponse> localVarResponse = GetVaultMetricsWithHttpInfo(subscriptionid, startTime, endTime);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get vault metrics
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="startTime">start time (optional)</param>
        /// <param name="endTime">end time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MetricsResponse</returns>
        public OmniCore.Client.ApiResponse<MetricsResponse> GetVaultMetricsWithHttpInfo(string subscriptionid, string startTime = default(string), string endTime = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling VaultApi->GetVaultMetrics");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }

            localVarRequestOptions.Operation = "VaultApi.GetVaultMetrics";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MetricsResponse>("/vault/subscriptions/{subscriptionid}/metrics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVaultMetrics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get vault metrics
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="startTime">start time (optional)</param>
        /// <param name="endTime">end time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MetricsResponse</returns>
        public async System.Threading.Tasks.Task<MetricsResponse> GetVaultMetricsAsync(string subscriptionid, string startTime = default(string), string endTime = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<MetricsResponse> localVarResponse = await GetVaultMetricsWithHttpInfoAsync(subscriptionid, startTime, endTime, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get vault metrics
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="startTime">start time (optional)</param>
        /// <param name="endTime">end time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MetricsResponse)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<MetricsResponse>> GetVaultMetricsWithHttpInfoAsync(string subscriptionid, string startTime = default(string), string endTime = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling VaultApi->GetVaultMetrics");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }

            localVarRequestOptions.Operation = "VaultApi.GetVaultMetrics";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MetricsResponse>("/vault/subscriptions/{subscriptionid}/metrics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVaultMetrics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get vault status
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VaultStatus</returns>
        public VaultStatus GetVaultStatus(string subscriptionid, int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<VaultStatus> localVarResponse = GetVaultStatusWithHttpInfo(subscriptionid);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get vault status
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VaultStatus</returns>
        public OmniCore.Client.ApiResponse<VaultStatus> GetVaultStatusWithHttpInfo(string subscriptionid, int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling VaultApi->GetVaultStatus");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter

            localVarRequestOptions.Operation = "VaultApi.GetVaultStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<VaultStatus>("/vault/subscriptions/{subscriptionid}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVaultStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get vault status
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VaultStatus</returns>
        public async System.Threading.Tasks.Task<VaultStatus> GetVaultStatusAsync(string subscriptionid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<VaultStatus> localVarResponse = await GetVaultStatusWithHttpInfoAsync(subscriptionid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get vault status
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VaultStatus)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<VaultStatus>> GetVaultStatusWithHttpInfoAsync(string subscriptionid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling VaultApi->GetVaultStatus");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter

            localVarRequestOptions.Operation = "VaultApi.GetVaultStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VaultStatus>("/vault/subscriptions/{subscriptionid}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVaultStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Start Export
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="startExportBody">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Frame</returns>
        public Frame StartExport(string subscriptionid, StartExportBody startExportBody = default(StartExportBody), int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<Frame> localVarResponse = StartExportWithHttpInfo(subscriptionid, startExportBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Start Export
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="startExportBody">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Frame</returns>
        public OmniCore.Client.ApiResponse<Frame> StartExportWithHttpInfo(string subscriptionid, StartExportBody startExportBody = default(StartExportBody), int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling VaultApi->StartExport");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter
            localVarRequestOptions.Data = startExportBody;

            localVarRequestOptions.Operation = "VaultApi.StartExport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Frame>("/vault/subscriptions/{subscriptionid}/exports", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartExport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Start Export
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="startExportBody">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Frame</returns>
        public async System.Threading.Tasks.Task<Frame> StartExportAsync(string subscriptionid, StartExportBody startExportBody = default(StartExportBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<Frame> localVarResponse = await StartExportWithHttpInfoAsync(subscriptionid, startExportBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Start Export
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="startExportBody">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Frame)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<Frame>> StartExportWithHttpInfoAsync(string subscriptionid, StartExportBody startExportBody = default(StartExportBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling VaultApi->StartExport");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter
            localVarRequestOptions.Data = startExportBody;

            localVarRequestOptions.Operation = "VaultApi.StartExport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Frame>("/vault/subscriptions/{subscriptionid}/exports", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartExport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Start Replay
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="replayBody">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string StartReplay(string subscriptionid, ReplayBody replayBody = default(ReplayBody), int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<string> localVarResponse = StartReplayWithHttpInfo(subscriptionid, replayBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Start Replay
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="replayBody">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public OmniCore.Client.ApiResponse<string> StartReplayWithHttpInfo(string subscriptionid, ReplayBody replayBody = default(ReplayBody), int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling VaultApi->StartReplay");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter
            localVarRequestOptions.Data = replayBody;

            localVarRequestOptions.Operation = "VaultApi.StartReplay";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/vault/subscriptions/{subscriptionid}/replays", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartReplay", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Start Replay
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="replayBody">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> StartReplayAsync(string subscriptionid, ReplayBody replayBody = default(ReplayBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<string> localVarResponse = await StartReplayWithHttpInfoAsync(subscriptionid, replayBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Start Replay
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">Subscription ID</param>
        /// <param name="replayBody">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<string>> StartReplayWithHttpInfoAsync(string subscriptionid, ReplayBody replayBody = default(ReplayBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionid' when calling VaultApi->StartReplay");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionid", OmniCore.Client.ClientUtils.ParameterToString(subscriptionid)); // path parameter
            localVarRequestOptions.Data = replayBody;

            localVarRequestOptions.Operation = "VaultApi.StartReplay";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/vault/subscriptions/{subscriptionid}/replays", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartReplay", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
