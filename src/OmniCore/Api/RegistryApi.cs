/*
 * OmniCore Model and State Management API
 *
 * This is an OmniCore Model and State Management server.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@korewireless.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using OmniCore.Client;
using OmniCore.Model;

namespace OmniCore.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRegistryApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registry">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeviceRegistry</returns>
        DeviceRegistry CreateRegistry(string subscriptionId, DeviceRegistry registry = default(DeviceRegistry), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registry">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeviceRegistry</returns>
        ApiResponse<DeviceRegistry> CreateRegistryWithHttpInfo(string subscriptionId, DeviceRegistry registry = default(DeviceRegistry), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Info</returns>
        Info DeleteRegistry(string subscriptionId, string registryId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Info</returns>
        ApiResponse<Info> DeleteRegistryWithHttpInfo(string subscriptionId, string registryId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all registries under a subscription
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="pageNumber">Page Number (optional)</param>
        /// <param name="pageSize">Page Size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListDeviceRegistries</returns>
        ListDeviceRegistries GetRegistries(string subscriptionId, int? pageNumber = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all registries under a subscription
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="pageNumber">Page Number (optional)</param>
        /// <param name="pageSize">Page Size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListDeviceRegistries</returns>
        ApiResponse<ListDeviceRegistries> GetRegistriesWithHttpInfo(string subscriptionId, int? pageNumber = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeviceRegistry</returns>
        DeviceRegistry GetRegistry(string subscriptionId, string registryId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeviceRegistry</returns>
        ApiResponse<DeviceRegistry> GetRegistryWithHttpInfo(string subscriptionId, string registryId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="updateMask">values to be updated: eventNotificationConfigs,stateNotificationConfig.pubsub_topic_name,logNotificationConfig.pubsub_topic_name,mqttConfig.mqtt_enabled_state,httpConfig.http_enabled_state,logLevel,credentials</param>
        /// <param name="registry">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeviceRegistry</returns>
        DeviceRegistry UpdateRegistry(string subscriptionId, string registryId, string updateMask, DeviceRegistry registry = default(DeviceRegistry), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="updateMask">values to be updated: eventNotificationConfigs,stateNotificationConfig.pubsub_topic_name,logNotificationConfig.pubsub_topic_name,mqttConfig.mqtt_enabled_state,httpConfig.http_enabled_state,logLevel,credentials</param>
        /// <param name="registry">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeviceRegistry</returns>
        ApiResponse<DeviceRegistry> UpdateRegistryWithHttpInfo(string subscriptionId, string registryId, string updateMask, DeviceRegistry registry = default(DeviceRegistry), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRegistryApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registry">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeviceRegistry</returns>
        System.Threading.Tasks.Task<DeviceRegistry> CreateRegistryAsync(string subscriptionId, DeviceRegistry registry = default(DeviceRegistry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registry">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeviceRegistry)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceRegistry>> CreateRegistryWithHttpInfoAsync(string subscriptionId, DeviceRegistry registry = default(DeviceRegistry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Info</returns>
        System.Threading.Tasks.Task<Info> DeleteRegistryAsync(string subscriptionId, string registryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Info)</returns>
        System.Threading.Tasks.Task<ApiResponse<Info>> DeleteRegistryWithHttpInfoAsync(string subscriptionId, string registryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all registries under a subscription
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="pageNumber">Page Number (optional)</param>
        /// <param name="pageSize">Page Size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListDeviceRegistries</returns>
        System.Threading.Tasks.Task<ListDeviceRegistries> GetRegistriesAsync(string subscriptionId, int? pageNumber = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all registries under a subscription
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="pageNumber">Page Number (optional)</param>
        /// <param name="pageSize">Page Size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListDeviceRegistries)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListDeviceRegistries>> GetRegistriesWithHttpInfoAsync(string subscriptionId, int? pageNumber = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeviceRegistry</returns>
        System.Threading.Tasks.Task<DeviceRegistry> GetRegistryAsync(string subscriptionId, string registryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeviceRegistry)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceRegistry>> GetRegistryWithHttpInfoAsync(string subscriptionId, string registryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="updateMask">values to be updated: eventNotificationConfigs,stateNotificationConfig.pubsub_topic_name,logNotificationConfig.pubsub_topic_name,mqttConfig.mqtt_enabled_state,httpConfig.http_enabled_state,logLevel,credentials</param>
        /// <param name="registry">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeviceRegistry</returns>
        System.Threading.Tasks.Task<DeviceRegistry> UpdateRegistryAsync(string subscriptionId, string registryId, string updateMask, DeviceRegistry registry = default(DeviceRegistry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a registry
        /// </remarks>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="updateMask">values to be updated: eventNotificationConfigs,stateNotificationConfig.pubsub_topic_name,logNotificationConfig.pubsub_topic_name,mqttConfig.mqtt_enabled_state,httpConfig.http_enabled_state,logLevel,credentials</param>
        /// <param name="registry">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeviceRegistry)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceRegistry>> UpdateRegistryWithHttpInfoAsync(string subscriptionId, string registryId, string updateMask, DeviceRegistry registry = default(DeviceRegistry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRegistryApi : IRegistryApiSync, IRegistryApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RegistryApi : IRegistryApi
    {
        private OmniCore.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RegistryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RegistryApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RegistryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RegistryApi(string basePath)
        {
            this.Configuration = OmniCore.Client.Configuration.MergeConfigurations(
                OmniCore.Client.GlobalConfiguration.Instance,
                new OmniCore.Client.Configuration { BasePath = basePath }
            );
            this.Client = new OmniCore.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OmniCore.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = OmniCore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RegistryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RegistryApi(OmniCore.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = OmniCore.Client.Configuration.MergeConfigurations(
                OmniCore.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new OmniCore.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OmniCore.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = OmniCore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RegistryApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RegistryApi(OmniCore.Client.ISynchronousClient client, OmniCore.Client.IAsynchronousClient asyncClient, OmniCore.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = OmniCore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public OmniCore.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public OmniCore.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OmniCore.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OmniCore.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Create a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registry">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeviceRegistry</returns>
        public DeviceRegistry CreateRegistry(string subscriptionId, DeviceRegistry registry = default(DeviceRegistry), int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<DeviceRegistry> localVarResponse = CreateRegistryWithHttpInfo(subscriptionId, registry);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registry">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeviceRegistry</returns>
        public OmniCore.Client.ApiResponse<DeviceRegistry> CreateRegistryWithHttpInfo(string subscriptionId, DeviceRegistry registry = default(DeviceRegistry), int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling RegistryApi->CreateRegistry");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionId", OmniCore.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.Data = registry;

            localVarRequestOptions.Operation = "RegistryApi.CreateRegistry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DeviceRegistry>("/subscriptions/{subscriptionId}/registries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRegistry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registry">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeviceRegistry</returns>
        public async System.Threading.Tasks.Task<DeviceRegistry> CreateRegistryAsync(string subscriptionId, DeviceRegistry registry = default(DeviceRegistry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<DeviceRegistry> localVarResponse = await CreateRegistryWithHttpInfoAsync(subscriptionId, registry, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registry">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeviceRegistry)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<DeviceRegistry>> CreateRegistryWithHttpInfoAsync(string subscriptionId, DeviceRegistry registry = default(DeviceRegistry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling RegistryApi->CreateRegistry");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionId", OmniCore.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.Data = registry;

            localVarRequestOptions.Operation = "RegistryApi.CreateRegistry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DeviceRegistry>("/subscriptions/{subscriptionId}/registries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRegistry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Info</returns>
        public Info DeleteRegistry(string subscriptionId, string registryId, int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<Info> localVarResponse = DeleteRegistryWithHttpInfo(subscriptionId, registryId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Delete a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Info</returns>
        public OmniCore.Client.ApiResponse<Info> DeleteRegistryWithHttpInfo(string subscriptionId, string registryId, int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling RegistryApi->DeleteRegistry");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling RegistryApi->DeleteRegistry");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionId", OmniCore.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter

            localVarRequestOptions.Operation = "RegistryApi.DeleteRegistry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Info>("/subscriptions/{subscriptionId}/registries/{registryId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRegistry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Info</returns>
        public async System.Threading.Tasks.Task<Info> DeleteRegistryAsync(string subscriptionId, string registryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<Info> localVarResponse = await DeleteRegistryWithHttpInfoAsync(subscriptionId, registryId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Delete a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Info)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<Info>> DeleteRegistryWithHttpInfoAsync(string subscriptionId, string registryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling RegistryApi->DeleteRegistry");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling RegistryApi->DeleteRegistry");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionId", OmniCore.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter

            localVarRequestOptions.Operation = "RegistryApi.DeleteRegistry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Info>("/subscriptions/{subscriptionId}/registries/{registryId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRegistry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get all registries under a subscription
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="pageNumber">Page Number (optional)</param>
        /// <param name="pageSize">Page Size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListDeviceRegistries</returns>
        public ListDeviceRegistries GetRegistries(string subscriptionId, int? pageNumber = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<ListDeviceRegistries> localVarResponse = GetRegistriesWithHttpInfo(subscriptionId, pageNumber, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get all registries under a subscription
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="pageNumber">Page Number (optional)</param>
        /// <param name="pageSize">Page Size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListDeviceRegistries</returns>
        public OmniCore.Client.ApiResponse<ListDeviceRegistries> GetRegistriesWithHttpInfo(string subscriptionId, int? pageNumber = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling RegistryApi->GetRegistries");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionId", OmniCore.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "RegistryApi.GetRegistries";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListDeviceRegistries>("/subscriptions/{subscriptionId}/registries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRegistries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get all registries under a subscription
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="pageNumber">Page Number (optional)</param>
        /// <param name="pageSize">Page Size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListDeviceRegistries</returns>
        public async System.Threading.Tasks.Task<ListDeviceRegistries> GetRegistriesAsync(string subscriptionId, int? pageNumber = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<ListDeviceRegistries> localVarResponse = await GetRegistriesWithHttpInfoAsync(subscriptionId, pageNumber, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get all registries under a subscription
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="pageNumber">Page Number (optional)</param>
        /// <param name="pageSize">Page Size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListDeviceRegistries)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<ListDeviceRegistries>> GetRegistriesWithHttpInfoAsync(string subscriptionId, int? pageNumber = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling RegistryApi->GetRegistries");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionId", OmniCore.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "RegistryApi.GetRegistries";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListDeviceRegistries>("/subscriptions/{subscriptionId}/registries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRegistries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeviceRegistry</returns>
        public DeviceRegistry GetRegistry(string subscriptionId, string registryId, int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<DeviceRegistry> localVarResponse = GetRegistryWithHttpInfo(subscriptionId, registryId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeviceRegistry</returns>
        public OmniCore.Client.ApiResponse<DeviceRegistry> GetRegistryWithHttpInfo(string subscriptionId, string registryId, int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling RegistryApi->GetRegistry");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling RegistryApi->GetRegistry");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionId", OmniCore.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter

            localVarRequestOptions.Operation = "RegistryApi.GetRegistry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DeviceRegistry>("/subscriptions/{subscriptionId}/registries/{registryId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRegistry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeviceRegistry</returns>
        public async System.Threading.Tasks.Task<DeviceRegistry> GetRegistryAsync(string subscriptionId, string registryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<DeviceRegistry> localVarResponse = await GetRegistryWithHttpInfoAsync(subscriptionId, registryId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeviceRegistry)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<DeviceRegistry>> GetRegistryWithHttpInfoAsync(string subscriptionId, string registryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling RegistryApi->GetRegistry");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling RegistryApi->GetRegistry");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionId", OmniCore.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter

            localVarRequestOptions.Operation = "RegistryApi.GetRegistry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DeviceRegistry>("/subscriptions/{subscriptionId}/registries/{registryId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRegistry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="updateMask">values to be updated: eventNotificationConfigs,stateNotificationConfig.pubsub_topic_name,logNotificationConfig.pubsub_topic_name,mqttConfig.mqtt_enabled_state,httpConfig.http_enabled_state,logLevel,credentials</param>
        /// <param name="registry">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeviceRegistry</returns>
        public DeviceRegistry UpdateRegistry(string subscriptionId, string registryId, string updateMask, DeviceRegistry registry = default(DeviceRegistry), int operationIndex = 0)
        {
            OmniCore.Client.ApiResponse<DeviceRegistry> localVarResponse = UpdateRegistryWithHttpInfo(subscriptionId, registryId, updateMask, registry);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="updateMask">values to be updated: eventNotificationConfigs,stateNotificationConfig.pubsub_topic_name,logNotificationConfig.pubsub_topic_name,mqttConfig.mqtt_enabled_state,httpConfig.http_enabled_state,logLevel,credentials</param>
        /// <param name="registry">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeviceRegistry</returns>
        public OmniCore.Client.ApiResponse<DeviceRegistry> UpdateRegistryWithHttpInfo(string subscriptionId, string registryId, string updateMask, DeviceRegistry registry = default(DeviceRegistry), int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling RegistryApi->UpdateRegistry");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling RegistryApi->UpdateRegistry");
            }

            // verify the required parameter 'updateMask' is set
            if (updateMask == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'updateMask' when calling RegistryApi->UpdateRegistry");
            }

            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionId", OmniCore.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "updateMask", updateMask));
            localVarRequestOptions.Data = registry;

            localVarRequestOptions.Operation = "RegistryApi.UpdateRegistry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<DeviceRegistry>("/subscriptions/{subscriptionId}/registries/{registryId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRegistry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="updateMask">values to be updated: eventNotificationConfigs,stateNotificationConfig.pubsub_topic_name,logNotificationConfig.pubsub_topic_name,mqttConfig.mqtt_enabled_state,httpConfig.http_enabled_state,logLevel,credentials</param>
        /// <param name="registry">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeviceRegistry</returns>
        public async System.Threading.Tasks.Task<DeviceRegistry> UpdateRegistryAsync(string subscriptionId, string registryId, string updateMask, DeviceRegistry registry = default(DeviceRegistry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OmniCore.Client.ApiResponse<DeviceRegistry> localVarResponse = await UpdateRegistryWithHttpInfoAsync(subscriptionId, registryId, updateMask, registry, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update a registry
        /// </summary>
        /// <exception cref="OmniCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="registryId">Registry ID</param>
        /// <param name="updateMask">values to be updated: eventNotificationConfigs,stateNotificationConfig.pubsub_topic_name,logNotificationConfig.pubsub_topic_name,mqttConfig.mqtt_enabled_state,httpConfig.http_enabled_state,logLevel,credentials</param>
        /// <param name="registry">application/json (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeviceRegistry)</returns>
        public async System.Threading.Tasks.Task<OmniCore.Client.ApiResponse<DeviceRegistry>> UpdateRegistryWithHttpInfoAsync(string subscriptionId, string registryId, string updateMask, DeviceRegistry registry = default(DeviceRegistry), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling RegistryApi->UpdateRegistry");
            }

            // verify the required parameter 'registryId' is set
            if (registryId == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'registryId' when calling RegistryApi->UpdateRegistry");
            }

            // verify the required parameter 'updateMask' is set
            if (updateMask == null)
            {
                throw new OmniCore.Client.ApiException(400, "Missing required parameter 'updateMask' when calling RegistryApi->UpdateRegistry");
            }


            OmniCore.Client.RequestOptions localVarRequestOptions = new OmniCore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OmniCore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OmniCore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscriptionId", OmniCore.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("registryId", OmniCore.Client.ClientUtils.ParameterToString(registryId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(OmniCore.Client.ClientUtils.ParameterToMultiMap("", "updateMask", updateMask));
            localVarRequestOptions.Data = registry;

            localVarRequestOptions.Operation = "RegistryApi.UpdateRegistry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<DeviceRegistry>("/subscriptions/{subscriptionId}/registries/{registryId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRegistry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
