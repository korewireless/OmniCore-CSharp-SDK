/*
 * OmniCore Model and State Management API
 *
 * This is an OmniCore Model and State Management server.
 *
 * The version of the OpenAPI document: 1.8.10
 * Contact: omnicoresupport@korewireless.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OmniCore.Client.OpenAPIDateConverter;

namespace OmniCore.Model
{
    /// <summary>
    /// DeviceOnline
    /// </summary>
    [DataContract(Name = "DeviceOnline")]
    public partial class DeviceOnline : IEquatable<DeviceOnline>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceOnline" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeviceOnline() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceOnline" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        public DeviceOnline(string id = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for DeviceOnline and cannot be null");
            }
            this.Id = id;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Registry
        /// </summary>
        [DataMember(Name = "registry", EmitDefaultValue = false)]
        public string Registry { get; private set; }

        /// <summary>
        /// Returns false as Registry should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRegistry()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ClientOnline
        /// </summary>
        [DataMember(Name = "clientOnline", EmitDefaultValue = true)]
        public bool ClientOnline { get; private set; }

        /// <summary>
        /// Returns false as ClientOnline should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeClientOnline()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets LastHeartbeatTime
        /// </summary>
        [DataMember(Name = "lastHeartbeatTime", EmitDefaultValue = false)]
        public string LastHeartbeatTime { get; private set; }

        /// <summary>
        /// Returns false as LastHeartbeatTime should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastHeartbeatTime()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Subscription
        /// </summary>
        [DataMember(Name = "subscription", EmitDefaultValue = false)]
        public string Subscription { get; private set; }

        /// <summary>
        /// Returns false as Subscription should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSubscription()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeviceOnline {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Registry: ").Append(Registry).Append("\n");
            sb.Append("  ClientOnline: ").Append(ClientOnline).Append("\n");
            sb.Append("  LastHeartbeatTime: ").Append(LastHeartbeatTime).Append("\n");
            sb.Append("  Subscription: ").Append(Subscription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeviceOnline);
        }

        /// <summary>
        /// Returns true if DeviceOnline instances are equal
        /// </summary>
        /// <param name="input">Instance of DeviceOnline to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceOnline input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Registry == input.Registry ||
                    (this.Registry != null &&
                    this.Registry.Equals(input.Registry))
                ) && 
                (
                    this.ClientOnline == input.ClientOnline ||
                    this.ClientOnline.Equals(input.ClientOnline)
                ) && 
                (
                    this.LastHeartbeatTime == input.LastHeartbeatTime ||
                    (this.LastHeartbeatTime != null &&
                    this.LastHeartbeatTime.Equals(input.LastHeartbeatTime))
                ) && 
                (
                    this.Subscription == input.Subscription ||
                    (this.Subscription != null &&
                    this.Subscription.Equals(input.Subscription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Registry != null)
                {
                    hashCode = (hashCode * 59) + this.Registry.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ClientOnline.GetHashCode();
                if (this.LastHeartbeatTime != null)
                {
                    hashCode = (hashCode * 59) + this.LastHeartbeatTime.GetHashCode();
                }
                if (this.Subscription != null)
                {
                    hashCode = (hashCode * 59) + this.Subscription.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) maxLength
            if (this.Id != null && this.Id.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be less than 256.", new [] { "Id" });
            }

            // Id (string) minLength
            if (this.Id != null && this.Id.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be greater than 3.", new [] { "Id" });
            }

            yield break;
        }
    }

}
