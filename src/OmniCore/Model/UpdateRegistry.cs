/*
 * OmniCore Model and State Management API
 *
 * This is an OmniCore Model and State Management server.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@korewireless.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OmniCore.Client.OpenAPIDateConverter;

namespace OmniCore.Model
{
    /// <summary>
    /// UpdateRegistry
    /// </summary>
    [DataContract(Name = "UpdateRegistry")]
    public partial class UpdateRegistry : IEquatable<UpdateRegistry>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets LogLevel
        /// </summary>
        [DataMember(Name = "logLevel", EmitDefaultValue = false)]
        public LogLevel? LogLevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateRegistry" /> class.
        /// </summary>
        /// <param name="credentials">credentials.</param>
        /// <param name="httpConfig">httpConfig.</param>
        /// <param name="mqttConfig">mqttConfig.</param>
        /// <param name="logLevel">logLevel.</param>
        /// <param name="eventNotificationConfigs">eventNotificationConfigs.</param>
        /// <param name="logNotificationConfig">logNotificationConfig.</param>
        /// <param name="stateNotificationConfig">stateNotificationConfig.</param>
        public UpdateRegistry(List<RegistryCredential> credentials = default(List<RegistryCredential>), HttpConfig httpConfig = default(HttpConfig), MqttConfig mqttConfig = default(MqttConfig), LogLevel? logLevel = default(LogLevel?), List<EventNotificationConfig> eventNotificationConfigs = default(List<EventNotificationConfig>), NotificationConfig logNotificationConfig = default(NotificationConfig), NotificationConfig stateNotificationConfig = default(NotificationConfig))
        {
            this.Credentials = credentials;
            this.HttpConfig = httpConfig;
            this.MqttConfig = mqttConfig;
            this.LogLevel = logLevel;
            this.EventNotificationConfigs = eventNotificationConfigs;
            this.LogNotificationConfig = logNotificationConfig;
            this.StateNotificationConfig = stateNotificationConfig;
        }

        /// <summary>
        /// Gets or Sets Credentials
        /// </summary>
        [DataMember(Name = "credentials", EmitDefaultValue = false)]
        public List<RegistryCredential> Credentials { get; set; }

        /// <summary>
        /// Gets or Sets HttpConfig
        /// </summary>
        [DataMember(Name = "httpConfig", EmitDefaultValue = false)]
        public HttpConfig HttpConfig { get; set; }

        /// <summary>
        /// Gets or Sets MqttConfig
        /// </summary>
        [DataMember(Name = "mqttConfig", EmitDefaultValue = false)]
        public MqttConfig MqttConfig { get; set; }

        /// <summary>
        /// Gets or Sets EventNotificationConfigs
        /// </summary>
        [DataMember(Name = "eventNotificationConfigs", EmitDefaultValue = false)]
        public List<EventNotificationConfig> EventNotificationConfigs { get; set; }

        /// <summary>
        /// Gets or Sets LogNotificationConfig
        /// </summary>
        [DataMember(Name = "logNotificationConfig", EmitDefaultValue = false)]
        public NotificationConfig LogNotificationConfig { get; set; }

        /// <summary>
        /// Gets or Sets StateNotificationConfig
        /// </summary>
        [DataMember(Name = "stateNotificationConfig", EmitDefaultValue = false)]
        public NotificationConfig StateNotificationConfig { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateRegistry {\n");
            sb.Append("  Credentials: ").Append(Credentials).Append("\n");
            sb.Append("  HttpConfig: ").Append(HttpConfig).Append("\n");
            sb.Append("  MqttConfig: ").Append(MqttConfig).Append("\n");
            sb.Append("  LogLevel: ").Append(LogLevel).Append("\n");
            sb.Append("  EventNotificationConfigs: ").Append(EventNotificationConfigs).Append("\n");
            sb.Append("  LogNotificationConfig: ").Append(LogNotificationConfig).Append("\n");
            sb.Append("  StateNotificationConfig: ").Append(StateNotificationConfig).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateRegistry);
        }

        /// <summary>
        /// Returns true if UpdateRegistry instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateRegistry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateRegistry input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Credentials == input.Credentials ||
                    this.Credentials != null &&
                    input.Credentials != null &&
                    this.Credentials.SequenceEqual(input.Credentials)
                ) && 
                (
                    this.HttpConfig == input.HttpConfig ||
                    (this.HttpConfig != null &&
                    this.HttpConfig.Equals(input.HttpConfig))
                ) && 
                (
                    this.MqttConfig == input.MqttConfig ||
                    (this.MqttConfig != null &&
                    this.MqttConfig.Equals(input.MqttConfig))
                ) && 
                (
                    this.LogLevel == input.LogLevel ||
                    this.LogLevel.Equals(input.LogLevel)
                ) && 
                (
                    this.EventNotificationConfigs == input.EventNotificationConfigs ||
                    this.EventNotificationConfigs != null &&
                    input.EventNotificationConfigs != null &&
                    this.EventNotificationConfigs.SequenceEqual(input.EventNotificationConfigs)
                ) && 
                (
                    this.LogNotificationConfig == input.LogNotificationConfig ||
                    (this.LogNotificationConfig != null &&
                    this.LogNotificationConfig.Equals(input.LogNotificationConfig))
                ) && 
                (
                    this.StateNotificationConfig == input.StateNotificationConfig ||
                    (this.StateNotificationConfig != null &&
                    this.StateNotificationConfig.Equals(input.StateNotificationConfig))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Credentials != null)
                {
                    hashCode = (hashCode * 59) + this.Credentials.GetHashCode();
                }
                if (this.HttpConfig != null)
                {
                    hashCode = (hashCode * 59) + this.HttpConfig.GetHashCode();
                }
                if (this.MqttConfig != null)
                {
                    hashCode = (hashCode * 59) + this.MqttConfig.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LogLevel.GetHashCode();
                if (this.EventNotificationConfigs != null)
                {
                    hashCode = (hashCode * 59) + this.EventNotificationConfigs.GetHashCode();
                }
                if (this.LogNotificationConfig != null)
                {
                    hashCode = (hashCode * 59) + this.LogNotificationConfig.GetHashCode();
                }
                if (this.StateNotificationConfig != null)
                {
                    hashCode = (hashCode * 59) + this.StateNotificationConfig.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
