/*
 * OmniCore Model and State Management API
 *
 * This is an OmniCore Model and State Management server.
 *
 * The version of the OpenAPI document: 1.8.10
 * Contact: omnicoresupport@korewireless.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OmniCore.Client.OpenAPIDateConverter;

namespace OmniCore.Model
{
    /// <summary>
    /// Policy
    /// </summary>
    [DataContract(Name = "policy")]
    public partial class Policy : IEquatable<Policy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Policy" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Policy() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Policy" /> class.
        /// </summary>
        /// <param name="connect">connect (required).</param>
        /// <param name="publishState">publishState (required).</param>
        /// <param name="publishEvents">publishEvents (required).</param>
        /// <param name="publishEventsRegex">publishEventsRegex (required).</param>
        /// <param name="publishLoopback">publishLoopback (required).</param>
        /// <param name="subscribeCommand">subscribeCommand (required).</param>
        /// <param name="subscribeCommandRegex">subscribeCommandRegex (required).</param>
        /// <param name="subscribeBroadcast">subscribeBroadcast (required).</param>
        /// <param name="subscribeBroadcastRegex">subscribeBroadcastRegex (required).</param>
        /// <param name="subscribeConfig">subscribeConfig (required).</param>
        public Policy(bool connect = default(bool), bool publishState = default(bool), bool publishEvents = default(bool), string publishEventsRegex = default(string), bool publishLoopback = default(bool), bool subscribeCommand = default(bool), string subscribeCommandRegex = default(string), bool subscribeBroadcast = default(bool), string subscribeBroadcastRegex = default(string), bool subscribeConfig = default(bool))
        {
            this.Connect = connect;
            this.PublishState = publishState;
            this.PublishEvents = publishEvents;
            // to ensure "publishEventsRegex" is required (not null)
            if (publishEventsRegex == null)
            {
                throw new ArgumentNullException("publishEventsRegex is a required property for Policy and cannot be null");
            }
            this.PublishEventsRegex = publishEventsRegex;
            this.PublishLoopback = publishLoopback;
            this.SubscribeCommand = subscribeCommand;
            // to ensure "subscribeCommandRegex" is required (not null)
            if (subscribeCommandRegex == null)
            {
                throw new ArgumentNullException("subscribeCommandRegex is a required property for Policy and cannot be null");
            }
            this.SubscribeCommandRegex = subscribeCommandRegex;
            this.SubscribeBroadcast = subscribeBroadcast;
            // to ensure "subscribeBroadcastRegex" is required (not null)
            if (subscribeBroadcastRegex == null)
            {
                throw new ArgumentNullException("subscribeBroadcastRegex is a required property for Policy and cannot be null");
            }
            this.SubscribeBroadcastRegex = subscribeBroadcastRegex;
            this.SubscribeConfig = subscribeConfig;
        }

        /// <summary>
        /// Gets or Sets Connect
        /// </summary>
        [DataMember(Name = "Connect", IsRequired = true, EmitDefaultValue = true)]
        public bool Connect { get; set; }

        /// <summary>
        /// Gets or Sets PublishState
        /// </summary>
        [DataMember(Name = "PublishState", IsRequired = true, EmitDefaultValue = true)]
        public bool PublishState { get; set; }

        /// <summary>
        /// Gets or Sets PublishEvents
        /// </summary>
        [DataMember(Name = "PublishEvents", IsRequired = true, EmitDefaultValue = true)]
        public bool PublishEvents { get; set; }

        /// <summary>
        /// Gets or Sets PublishEventsRegex
        /// </summary>
        [DataMember(Name = "PublishEventsRegex", IsRequired = true, EmitDefaultValue = true)]
        public string PublishEventsRegex { get; set; }

        /// <summary>
        /// Gets or Sets PublishLoopback
        /// </summary>
        [DataMember(Name = "PublishLoopback", IsRequired = true, EmitDefaultValue = true)]
        public bool PublishLoopback { get; set; }

        /// <summary>
        /// Gets or Sets SubscribeCommand
        /// </summary>
        [DataMember(Name = "SubscribeCommand", IsRequired = true, EmitDefaultValue = true)]
        public bool SubscribeCommand { get; set; }

        /// <summary>
        /// Gets or Sets SubscribeCommandRegex
        /// </summary>
        [DataMember(Name = "SubscribeCommandRegex", IsRequired = true, EmitDefaultValue = true)]
        public string SubscribeCommandRegex { get; set; }

        /// <summary>
        /// Gets or Sets SubscribeBroadcast
        /// </summary>
        [DataMember(Name = "SubscribeBroadcast", IsRequired = true, EmitDefaultValue = true)]
        public bool SubscribeBroadcast { get; set; }

        /// <summary>
        /// Gets or Sets SubscribeBroadcastRegex
        /// </summary>
        [DataMember(Name = "SubscribeBroadcastRegex", IsRequired = true, EmitDefaultValue = true)]
        public string SubscribeBroadcastRegex { get; set; }

        /// <summary>
        /// Gets or Sets SubscribeConfig
        /// </summary>
        [DataMember(Name = "SubscribeConfig", IsRequired = true, EmitDefaultValue = true)]
        public bool SubscribeConfig { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Policy {\n");
            sb.Append("  Connect: ").Append(Connect).Append("\n");
            sb.Append("  PublishState: ").Append(PublishState).Append("\n");
            sb.Append("  PublishEvents: ").Append(PublishEvents).Append("\n");
            sb.Append("  PublishEventsRegex: ").Append(PublishEventsRegex).Append("\n");
            sb.Append("  PublishLoopback: ").Append(PublishLoopback).Append("\n");
            sb.Append("  SubscribeCommand: ").Append(SubscribeCommand).Append("\n");
            sb.Append("  SubscribeCommandRegex: ").Append(SubscribeCommandRegex).Append("\n");
            sb.Append("  SubscribeBroadcast: ").Append(SubscribeBroadcast).Append("\n");
            sb.Append("  SubscribeBroadcastRegex: ").Append(SubscribeBroadcastRegex).Append("\n");
            sb.Append("  SubscribeConfig: ").Append(SubscribeConfig).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Policy);
        }

        /// <summary>
        /// Returns true if Policy instances are equal
        /// </summary>
        /// <param name="input">Instance of Policy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Policy input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Connect == input.Connect ||
                    this.Connect.Equals(input.Connect)
                ) && 
                (
                    this.PublishState == input.PublishState ||
                    this.PublishState.Equals(input.PublishState)
                ) && 
                (
                    this.PublishEvents == input.PublishEvents ||
                    this.PublishEvents.Equals(input.PublishEvents)
                ) && 
                (
                    this.PublishEventsRegex == input.PublishEventsRegex ||
                    (this.PublishEventsRegex != null &&
                    this.PublishEventsRegex.Equals(input.PublishEventsRegex))
                ) && 
                (
                    this.PublishLoopback == input.PublishLoopback ||
                    this.PublishLoopback.Equals(input.PublishLoopback)
                ) && 
                (
                    this.SubscribeCommand == input.SubscribeCommand ||
                    this.SubscribeCommand.Equals(input.SubscribeCommand)
                ) && 
                (
                    this.SubscribeCommandRegex == input.SubscribeCommandRegex ||
                    (this.SubscribeCommandRegex != null &&
                    this.SubscribeCommandRegex.Equals(input.SubscribeCommandRegex))
                ) && 
                (
                    this.SubscribeBroadcast == input.SubscribeBroadcast ||
                    this.SubscribeBroadcast.Equals(input.SubscribeBroadcast)
                ) && 
                (
                    this.SubscribeBroadcastRegex == input.SubscribeBroadcastRegex ||
                    (this.SubscribeBroadcastRegex != null &&
                    this.SubscribeBroadcastRegex.Equals(input.SubscribeBroadcastRegex))
                ) && 
                (
                    this.SubscribeConfig == input.SubscribeConfig ||
                    this.SubscribeConfig.Equals(input.SubscribeConfig)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Connect.GetHashCode();
                hashCode = (hashCode * 59) + this.PublishState.GetHashCode();
                hashCode = (hashCode * 59) + this.PublishEvents.GetHashCode();
                if (this.PublishEventsRegex != null)
                {
                    hashCode = (hashCode * 59) + this.PublishEventsRegex.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PublishLoopback.GetHashCode();
                hashCode = (hashCode * 59) + this.SubscribeCommand.GetHashCode();
                if (this.SubscribeCommandRegex != null)
                {
                    hashCode = (hashCode * 59) + this.SubscribeCommandRegex.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SubscribeBroadcast.GetHashCode();
                if (this.SubscribeBroadcastRegex != null)
                {
                    hashCode = (hashCode * 59) + this.SubscribeBroadcastRegex.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SubscribeConfig.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
