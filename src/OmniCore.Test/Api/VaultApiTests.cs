/*
 * OmniCore Model and State Management API
 *
 * This is an OmniCore Model and State Management server.
 *
 * The version of the OpenAPI document: 1.8.5
 * Contact: omnicoresupport@korewireless.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using OmniCore.Client;
using OmniCore.Api;
// uncomment below to import models
//using OmniCore.Model;

namespace OmniCore.Test.Api
{
    /// <summary>
    ///  Class for testing VaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class VaultApiTests : IDisposable
    {
        private VaultApi instance;

        public VaultApiTests()
        {
            instance = new VaultApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of VaultApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' VaultApi
            //Assert.IsType<VaultApi>(instance);
        }

        /// <summary>
        /// Test CreateVaultConfiguration
        /// </summary>
        [Fact]
        public void CreateVaultConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subscriptionid = null;
            //CreateConfiguration createConfiguration = null;
            //var response = instance.CreateVaultConfiguration(subscriptionid, createConfiguration);
            //Assert.IsType<Frame>(response);
        }

        /// <summary>
        /// Test CreateVaultKey
        /// </summary>
        [Fact]
        public void CreateVaultKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subscriptionid = null;
            //CreateVaultKeyBody createVaultKeyBody = null;
            //var response = instance.CreateVaultKey(subscriptionid, createVaultKeyBody);
            //Assert.IsType<Frame>(response);
        }

        /// <summary>
        /// Test DeleteConfiguration
        /// </summary>
        [Fact]
        public void DeleteConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subscriptionid = null;
            //string configid = null;
            //var response = instance.DeleteConfiguration(subscriptionid, configid);
            //Assert.IsType<Frame>(response);
        }

        /// <summary>
        /// Test DeleteVaultKey
        /// </summary>
        [Fact]
        public void DeleteVaultKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subscriptionid = null;
            //string keyid = null;
            //var response = instance.DeleteVaultKey(subscriptionid, keyid);
            //Assert.IsType<Frame>(response);
        }

        /// <summary>
        /// Test GetExports
        /// </summary>
        [Fact]
        public void GetExportsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subscriptionid = null;
            //var response = instance.GetExports(subscriptionid);
            //Assert.IsType<GetExportsResponse>(response);
        }

        /// <summary>
        /// Test GetRegistryData
        /// </summary>
        [Fact]
        public void GetRegistryDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subscriptionid = null;
            //var response = instance.GetRegistryData(subscriptionid);
            //Assert.IsType<FolderData>(response);
        }

        /// <summary>
        /// Test GetReplays
        /// </summary>
        [Fact]
        public void GetReplaysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subscriptionid = null;
            //var response = instance.GetReplays(subscriptionid);
            //Assert.IsType<GetReplaysResponse>(response);
        }

        /// <summary>
        /// Test GetVaultAudit
        /// </summary>
        [Fact]
        public void GetVaultAuditTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subscriptionid = null;
            //int? pageNumber = null;
            //int? pageSize = null;
            //var response = instance.GetVaultAudit(subscriptionid, pageNumber, pageSize);
            //Assert.IsType<AuditResult>(response);
        }

        /// <summary>
        /// Test GetVaultConfigurations
        /// </summary>
        [Fact]
        public void GetVaultConfigurationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subscriptionid = null;
            //var response = instance.GetVaultConfigurations(subscriptionid);
            //Assert.IsType<Configurations>(response);
        }

        /// <summary>
        /// Test GetVaultFiles
        /// </summary>
        [Fact]
        public void GetVaultFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subscriptionid = null;
            //string registryid = null;
            //string fileType = null;
            //var response = instance.GetVaultFiles(subscriptionid, registryid, fileType);
            //Assert.IsType<FileDetails>(response);
        }

        /// <summary>
        /// Test GetVaultKeys
        /// </summary>
        [Fact]
        public void GetVaultKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subscriptionid = null;
            //var response = instance.GetVaultKeys(subscriptionid);
            //Assert.IsType<GetKeysResponse>(response);
        }

        /// <summary>
        /// Test GetVaultMetrics
        /// </summary>
        [Fact]
        public void GetVaultMetricsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subscriptionid = null;
            //string startTime = null;
            //string endTime = null;
            //var response = instance.GetVaultMetrics(subscriptionid, startTime, endTime);
            //Assert.IsType<MetricsResponse>(response);
        }

        /// <summary>
        /// Test GetVaultStatus
        /// </summary>
        [Fact]
        public void GetVaultStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subscriptionid = null;
            //var response = instance.GetVaultStatus(subscriptionid);
            //Assert.IsType<VaultStatus>(response);
        }

        /// <summary>
        /// Test StartExport
        /// </summary>
        [Fact]
        public void StartExportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subscriptionid = null;
            //StartExportBody startExportBody = null;
            //var response = instance.StartExport(subscriptionid, startExportBody);
            //Assert.IsType<Frame>(response);
        }

        /// <summary>
        /// Test StartReplay
        /// </summary>
        [Fact]
        public void StartReplayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subscriptionid = null;
            //ReplayBody replayBody = null;
            //var response = instance.StartReplay(subscriptionid, replayBody);
            //Assert.IsType<string>(response);
        }
    }
}
